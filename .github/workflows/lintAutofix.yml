# Workflow Name: Auto-format & LINT fix
# This workflow ensures that the codebase is properly formatted and linted.

# Trigger Events:
# 1. Scheduled Trigger:
#    - Runs every day at 3:00 AM UTC using a cron schedule.
# 2. Manual Trigger:
#    - Can be manually triggered via the GitHub Actions interface.

# Permissions:
# - Grants write access to the repository contents to allow creating pull requests.

# Define a job named 'format_and_lint':
# - The job runs on the latest version of Ubuntu.

# Steps in the 'format_and_lint' job:
# 1. Check out the repository:
#    - Use the 'actions/checkout' action to clone the repository into the workflow environment.

# 2. Set up Node.js:
#    - Use the 'actions/setup-node' action to install Node.js version 20.

# 3. Install project dependencies:
#    - Run 'npm ci' to install dependencies in a clean environment.

# 4. Run Prettier:
#    - Execute 'npx prettier . --write' to format all files in the repository.

# 5. Run ESLint with auto-fix:
#    - Execute 'npx eslint . --fix' to lint the codebase and automatically fix issues.

# 6. Create a Pull Request:
#    - Use the 'peter-evans/create-pull-request' action to create a pull request with the following details:
#      - Commit message: "PR: Auto-formatting and LINT fixes"
#      - Pull request title: "PR: Auto-formatting and LINT fixes"
#      - Pull request body: "This PR includes automated formatting via Prettier and lint fixes via ESLint. Please review before merging."
#      - Branch name: "auto/format-lint-fixes"
#    - The pull request is created using a token stored in the repository secrets (`AUTOFIX_TOKEN`).
name: Auto-format & LINT fix

on:
  schedule:
    - cron: "0 3 * * *" # Runs at 3:00 AM UTC every day
  # Allows manual triggering
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: autofix-${{ github.ref }}
  cancel-in-progress: true

jobs:
  format_and_lint:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      NODE_VERSION: 22

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Debug Secrets
        run: echo "AUTOFIX_TOKEN is set"
        env:
          TOKEN: ${{ secrets.AUTOFIX_TOKEN }}

      - name: Run Prettier
        run: npx prettier . --write --ignore-path .prettierignore

      - name: Cache ESLint cache
        uses: actions/cache@v4
        with:
          # Cache directory for ESLint cache file. Using a named file in the root
          # is fine but keep it safe by caching the working directory (small risk)
          path: |
            .eslintcache
          key: ${{ runner.os }}-eslintcache-${{ hashFiles('**/package-lock.json', 'package.json', '.eslintrc.*', 'eslint.config.*') }}
          restore-keys: ${{ runner.os }}-eslintcache-
      - name: Compute ESLint fix stats (dry-run)
        id: lint-stats
        run: |
          set -euo pipefail
          # ESLint config already ignores cache and report files.
          npx eslint . --fix-dry-run -f json > eslint-dry.json || true
          node -e '
            const fs = require("fs");
            if (!fs.existsSync("eslint-dry.json")) { process.exit(0); }
            let fixableErrors=0, fixableWarnings=0, files=0;
            const data = JSON.parse(fs.readFileSync("eslint-dry.json","utf8"));
            for (const f of data) {
              files++;
              fixableErrors += f.fixableErrorCount || 0;
              fixableWarnings += f.fixableWarningCount || 0;
            }
            const fixes = fixableErrors + fixableWarnings;
            const out = process.env.GITHUB_OUTPUT;
            if (out) {
              fs.appendFileSync(out, `fixes=${fixes}\nfixableErrors=${fixableErrors}\nfixableWarnings=${fixableWarnings}\nfiles=${files}\n`);
            } else {
              console.log(`fixes=${fixes}\nfixableErrors=${fixableErrors}\nfixableWarnings=${fixableWarnings}\nfiles=${files}`);
            }
          '

      # Ensure the dry-run report is not committed; it's only for stats
      - name: Remove dry ESLint report
        run: rm -f eslint-dry.json || true

      - name: Run ESLint with auto-fix
        run: npx eslint . --fix --cache

      - name: Check for changes
        id: git-check
        run: |
          set -euo pipefail
          git add -A
          if git diff --cached --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            # Provide counts and list for summary
            COUNT=$(git diff --cached --name-only | wc -l | tr -d ' ')
            echo "files_changed=$COUNT" >> $GITHUB_OUTPUT
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            git diff --cached --name-only >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Write Actions summary
        if: steps.git-check.outputs.changed == 'true'
        run: |
          {
            echo "### Auto-format & Lint Summary"
            echo ""
            echo "- Files changed: ${{ steps.git-check.outputs.files_changed }}"
            echo "- ESLint fixes (potential): ${{ steps.lint-stats.outputs.fixes }} (errors: ${{ steps.lint-stats.outputs.fixableErrors }}, warnings: ${{ steps.lint-stats.outputs.fixableWarnings }})"
            echo ""
            echo "Changed files:"
            echo "${{ steps.git-check.outputs.changed_files }}" | sed 's/^/- /'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Get current date
        id: date
        if: steps.git-check.outputs.changed == 'true'
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Fetch Today in History
        id: today
        if: steps.git-check.outputs.changed == 'true'
        run: |
          RESPONSE=$(curl -fsL --max-time 10 https://history.muffinlabs.com/date || true)
          if [ $? -ne 0 ]; then
            echo "Warning: Failed to fetch data from https://history.muffinlabs.com/date" >&2
          fi
          if echo "$RESPONSE" | jq -e . > /dev/null 2>&1; then
            COUNT=$(echo "$RESPONSE" | jq '.data.Events | length')
            if [ "$COUNT" -gt 0 ]; then
              INDEX=$(( RANDOM % COUNT ))
              FACT_ITEM=$(echo "$RESPONSE" | jq -r ".data.Events[$INDEX]")
              YEAR=$(echo "$FACT_ITEM" | jq -r '.year')
              TEXT=$(echo "$FACT_ITEM" | jq -r '.text')
              echo "fact=${YEAR}: ${TEXT}" >> $GITHUB_OUTPUT
            else
              echo "fact=No historical events found today. üßê" >> $GITHUB_OUTPUT
            fi
          else
            echo "fact=Couldn't fetch today's historical fact. üí§" >> $GITHUB_OUTPUT
          fi

      - name: Fetch Weather Mood
        id: weather
        if: steps.git-check.outputs.changed == 'true'
        run: |
          CITY="Wokingham"
          # '&m' forces temperature in Celsius
          WEATHER=$(curl -s --max-time 8 "wttr.in/$CITY?format=%t+%c&m" || echo "")
          if [ -n "$WEATHER" ]; then
            echo "weather=$WEATHER in $CITY" >> $GITHUB_OUTPUT
          else
            echo "weather=Weather not available, but the code shines bright! ‚ú®" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.git-check.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.AUTOFIX_TOKEN }}
          commit-message: "PR: Auto-formatting and LINT fixes"
          title: "PR: Auto-formatting and LINT fixes - ${{ env.date }}"
          body: |
            üì£ **PR Details**
            This PR includes automated formatting via Prettier and LINT fixes via ESLint.
            Date of creation: ${{ env.date }}.
            Please review before merging!

            üìö **Today in History**
            ${{ steps.today.outputs.fact }}

            üå§Ô∏è **Weather Report**
            ${{ steps.weather.outputs.weather }}.
          branch: auto/format-lint-fixes
          branch-suffix: timestamp
          labels: |
            automated
            lint
            formatting
          assignees: ${{ github.actor }}
          delete-branch: true
