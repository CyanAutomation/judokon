# Workflow Name: Auto-format & LINT fix
# This workflow ensures that the codebase is properly formatted and linted.

# Trigger Events:
# 1. Scheduled Trigger:
#    - Runs every day at 3:00 AM UTC using a cron schedule.
# 2. Manual Trigger:
#    - Can be manually triggered via the GitHub Actions interface.

# Permissions:
# - Grants write access to the repository contents to allow creating pull requests.

# Define a job named 'format_and_lint':
# - The job runs on the latest version of Ubuntu.

# Steps in the 'format_and_lint' job:
# 1. Check out the repository:
#    - Use the 'actions/checkout' action to clone the repository into the workflow environment.

# 2. Set up Node.js:
#    - Use the 'actions/setup-node' action to install Node.js version 20.

# 3. Install project dependencies:
#    - Run 'npm ci' to install dependencies in a clean environment.

# 4. Run Prettier:
#    - Execute 'npx prettier . --write' to format all files in the repository.

# 5. Run ESLint with auto-fix:
#    - Execute 'npx eslint . --fix' to lint the codebase and automatically fix issues.

# 6. Create a Pull Request:
#    - Use the 'peter-evans/create-pull-request' action to create a pull request with the following details:
#      - Commit message: "PR: Auto-formatting and LINT fixes"
#      - Pull request title: "PR: Auto-formatting and LINT fixes"
#      - Pull request body: "This PR includes automated formatting via Prettier and lint fixes via ESLint. Please review before merging."
#      - Branch name: "auto/format-lint-fixes"
#    - The pull request is created using a token stored in the repository secrets (`AUTOFIX_TOKEN`).
name: Auto-format & LINT fix

on:
  schedule:
    - cron: "0 3 * * *" # Runs at 3:00 AM UTC every day
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write

jobs:
  format_and_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Debug Secrets
        run: echo "AUTOFIX_TOKEN is set"
        env:
          TOKEN: ${{ secrets.AUTOFIX_TOKEN }}

      - name: Run Prettier
        run: npx prettier . --write

      - name: Run ESLint with auto-fix
        run: npx eslint . --fix

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Fetch Today in History
        id: today
        run: |
          RESPONSE=$(curl -fsL https://history.muffinlabs.com/date)
          if [ $? -ne 0 ]; then
            echo "Warning: Failed to fetch data from https://history.muffinlabs.com/date" >&2
          fi
          if echo "$RESPONSE" | jq -e . > /dev/null 2>&1; then
            COUNT=$(echo "$RESPONSE" | jq '.data.Events | length')
            if [ "$COUNT" -gt 0 ]; then
              INDEX=$(( RANDOM % COUNT ))
              FACT_ITEM=$(echo "$RESPONSE" | jq -r ".data.Events[$INDEX]")
              YEAR=$(echo "$FACT_ITEM" | jq -r '.year')
              TEXT=$(echo "$FACT_ITEM" | jq -r '.text')
              echo "fact=${YEAR}: ${TEXT}" >> $GITHUB_OUTPUT
            else
              echo "fact=No historical events found today. 🧐" >> $GITHUB_OUTPUT
            fi
          else
            echo "fact=Couldn't fetch today's historical fact. 💤" >> $GITHUB_OUTPUT
          fi

      - name: Fetch Weather Mood
        id: weather
        run: |
          CITY="Wokingham"
          # '&m' forces temperature in Celsius
          WEATHER=$(curl -s "wttr.in/$CITY?format=%t+%c&m" || echo "")
          if [ -n "$WEATHER" ]; then
            echo "weather=$WEATHER in $CITY" >> $GITHUB_OUTPUT
          else
            echo "weather=Weather not available, but the code shines bright! ✨" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.AUTOFIX_TOKEN }}
          commit-message: "PR: Auto-formatting and LINT fixes"
          title: "PR: Auto-formatting and LINT fixes - ${{ env.date }}"
          body: |
            📣 **PR Details**
            This PR includes automated formatting via Prettier and LINT fixes via ESLint.
            Date of creation: ${{ env.date }}.
            Please review before merging!

            📚 **Today in History**
            ${{ steps.today.outputs.fact }}

            🌤️ **Weather Report**
            ${{ steps.weather.outputs.weather }}.
          branch: "auto/format-lint-fixes"
          labels: |
            automated
            documentation
            auto format
          assignees: ${{ github.actor }}
