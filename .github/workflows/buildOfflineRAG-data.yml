name: Build Offline RAG (Data)

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: Ignore drift and rebuild anyway
        required: false
        default: "false"

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: build-offline-rag-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_offline_rag:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Check for drift or forced rebuild
        id: drift
        shell: bash
        run: |
          if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "stale=true" >> "$GITHUB_OUTPUT"
            echo "DRIFT: forced rebuild"
            exit 0
          fi
          # Rebuild when client embeddings changed more recently than offline artifacts
          last_emb=$(git log -1 --format=%ct -- src/data/offline_rag_metadata.json 2>/dev/null || echo 0)
          last_client=$(git log -1 --format=%ct -- src/data/client_embeddings.json 2>/dev/null || echo 0)
          if [ "$last_client" -gt "$last_emb" ]; then
            echo "stale=true" >> "$GITHUB_OUTPUT"
            echo "DRIFT: client embeddings are newer ($last_client > $last_emb)"
          else
            echo "stale=false" >> "$GITHUB_OUTPUT"
            echo "DRIFT: offline artifacts up to date"
          fi

      - name: Prepare output folder
        id: prep
        run: |
          OUT_DIR="src/data"
          mkdir -p $OUT_DIR
          echo "out_dir=$OUT_DIR" >> $GITHUB_OUTPUT

      - name: Build offline assets
        if: steps.drift.outputs.stale == 'true'
        shell: bash
        run: |
          set -euxo pipefail
          npm run build:offline-rag

          echo '--- after-build tree (${{ steps.prep.outputs.out_dir }}) ---'
          (cd src && find data -maxdepth 1 -type f -name 'offline_rag_*' -print 2>/dev/null || true)

      - name: Assert expected files exist
        if: steps.drift.outputs.stale == 'true'
        shell: bash
        run: |
          err=0
          test -f "${{ steps.prep.outputs.out_dir }}/offline_rag_vectors.bin" || { echo "❌ missing offline_rag_vectors.bin"; err=1; }
          test -f "${{ steps.prep.outputs.out_dir }}/offline_rag_metadata.json" || { echo "❌ missing offline_rag_metadata.json"; err=1; }
          if [ $err -ne 0 ]; then
            echo "Hint: verify scripts/buildOfflineRag.mjs writes to src/data/."
            exit 1
          fi

      - name: Quick check of offline artifacts
        shell: bash
        run: |
          OUT_DIR="${{ steps.prep.outputs.out_dir }}"
          echo "=== Current offline artifacts in $OUT_DIR ==="
          for f in "$OUT_DIR/offline_rag_vectors.bin" "$OUT_DIR/offline_rag_metadata.json"; do
            if [ -f "$f" ]; then
              echo "File: $f"
              wc -c "$f"
              sha256sum "$f" || true
            else
              echo "MISSING: $f"
            fi
          done
          echo "--- tree (data) ---"
          (cd src && find data -maxdepth 1 -type f -name 'offline_rag_*' -print 2>/dev/null || true)
          echo "--- meta ---"
          if [ -f "$OUT_DIR/offline_rag_metadata.json" ]; then
            node -e 'const fs=require("fs");const m=JSON.parse(fs.readFileSync(process.argv[1],"utf8"));console.log(`vectorLength=${m.vectorLength} count=${m.count}`);' "$OUT_DIR/offline_rag_metadata.json"
          fi

      - name: Stage changes
        id: stage
        shell: bash
        run: |
          OUT_DIR="${{ steps.prep.outputs.out_dir }}"
          git add "$OUT_DIR/offline_rag_vectors.bin" 2>/dev/null || true
          git add "$OUT_DIR/offline_rag_metadata.json" 2>/dev/null || true

          if git diff --cached --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Get current date
        if: steps.stage.outputs.changed == 'true'
        id: d
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Summarize sizes
        if: steps.stage.outputs.changed == 'true'
        id: sizes
        shell: bash
        run: |
          OUT_DIR="${{ steps.prep.outputs.out_dir }}"
          size_kb() {
            test -f "$1" && echo "$(($(wc -c < "$1")/1024))KB" || echo "—"
          }

          IDX_SZ=$(size_kb "$OUT_DIR/offline_rag_vectors.bin")
          META_SZ=$(size_kb "$OUT_DIR/offline_rag_metadata.json")

          if [ -f "$OUT_DIR/offline_rag_metadata.json" ]; then
            DOCS=$(node -e 'const m=require(process.argv[1]);console.log(m.count || "?")' "$OUT_DIR/offline_rag_metadata.json")
          else
            DOCS="?"
          fi

          echo "idx=${IDX_SZ}"  >> $GITHUB_OUTPUT
          echo "meta=${META_SZ}" >> $GITHUB_OUTPUT
          echo "docs=${DOCS}"    >> $GITHUB_OUTPUT

          {
            echo "### Offline RAG Build Summary (data)"
            echo ""
            echo "- **Index size:** ${IDX_SZ}"
            echo "- **Meta size:** ${META_SZ}"
            echo "- **Docs:** ${DOCS}"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Create Pull Request
        if: steps.stage.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(rag-offline): refresh offline RAG data"
          title: "Offline RAG data refresh (${{ env.DATE }})"
          body: |
            This PR refreshes the **offline RAG data** artifacts.

            **Summary**
            - Index size: ${{ steps.sizes.outputs.idx }}
            - Meta size:  ${{ steps.sizes.outputs.meta }}
            - Docs:       ${{ steps.sizes.outputs.docs }}

            Notes:
            - Uses script: `npm run build:offline-rag`
          branch: chore/offline-rag-data-refresh
          labels: |
            automated
            offline
            vector

      - name: No changes
        if: steps.stage.outputs.changed != 'true'
        run: echo "No offline RAG data changes detected."
