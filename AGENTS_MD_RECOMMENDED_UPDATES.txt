RECOMMENDED AGENTS.MD UPDATES
=============================

Add this section to AGENTS.md after the existing testing documentation.
It should go in the "Validation Commands" or "Testing" section.


PROPOSED NEW SECTION FOR AGENTS.MD
==================================

### ðŸŽ¯ Battle Pages Regression Testing

When making changes to src/pages/battleClassic.html or src/pages/battleCLI.html,
ensure all critical tests pass:

#### Quick Validation

```bash
# Full battle pages regression suite
npm run test:battles

# Specific page tests
npm run test:battles:classic   # Classic Battle mode only
npm run test:battles:cli       # CLI Battle mode only
npm run test:battles:shared    # Shared components only

# Development workflows
npm run test:battles:watch     # Watch mode during development
npm run test:battles:cov       # Generate coverage report
```

#### Test Suite Organization

Battle page tests are centralized in tests/battles-regressions/ with clear
organization by page and feature:

| Folder | Purpose |
|--------|---------|
| tests/battles-regressions/classic/ | Classic Battle mode tests |
| tests/battles-regressions/cli/ | CLI Battle mode tests |
| tests/battles-regressions/shared/ | Shared component tests |
| playwright/battle-classic/ | Classic Battle E2E tests |
| playwright/battle-cli*.spec.js | CLI Battle E2E tests |

#### What Gets Tested

**Classic Battle (battleClassic.html):**
- Game initialization and bootstrap
- Round selection and validation
- Stat selection and keyboard shortcuts
- Timer functionality (countdown, auto-advance, cooldown)
- Scoring and round resolution
- Opponent message handling
- End-of-match modal and replay
- Feature flag integration
- Accessibility (keyboard navigation, ARIA)

**CLI Battle (battleCLI.html):**
- CLI initialization and prompt rendering
- Keyboard shortcuts and hotkeys
- Number input validation
- Verbose mode toggling and display
- Seed validation
- Points-to-win configuration
- Scoreboard rendering
- Focus management and navigation
- Accessibility (live regions, contrast)

**Shared Components:**
- Scoreboard rendering (both modes)
- Modal component behavior
- Stats panel display
- Battle configuration and defaults

#### Integration with Main Test Suite

```bash
npm run test:ci                 # Full suite (includes battles)
npm run test:battles            # Battles only (faster feedback)
npm run test                    # Watch all tests
npm run test:watch              # Watch all tests
npm run test:battles:watch      # Watch battles only
```

#### Before Submitting PR

Verify these commands pass when changing battle pages:

```bash
# 1. Run battle regression tests
npm run test:battles

# 2. Run with coverage to check if new tests added
npm run test:battles:cov

# 3. Run full test suite before submitting
npm run test:ci
```

#### Task Contract for Battle Page Changes

```json
{
  "inputs": ["src/pages/battleClassic.html | src/pages/battleCLI.html"],
  "outputs": [
    "tests/battles-regressions/classic/* | tests/battles-regressions/cli/*",
    "tests/battles-regressions/shared/* (if shared components modified)"
  ],
  "success": [
    "npm run test:battles: PASS",
    "eslint: PASS",
    "jsdoc: PASS",
    "no_unsilenced_console",
    "all new logic covered by tests"
  ],
  "errorMode": "ask_on_regression_failure"
}
```

#### Key Validation Commands

```bash
# Essential before commit (from AGENTS.md core)
npm run check:jsdoc && npx prettier . --check && npx eslint .

# Battle pages specific
npm run test:battles

# Full validation
npm run test:ci && npm run check:contrast
```

#### Common Workflows

**When fixing a bug in Classic Battle:**
```bash
npm run test:battles:classic    # Fast feedback
npm run test:battles:classic:watch  # Watch during development
npm run test:ci                 # Final validation
```

**When adding a feature to CLI Battle:**
```bash
# Create test first, implement, verify
npm run test:battles:cli:watch
# (TDD workflow)
npm run test:battles:cli        # Final check
```

**When refactoring shared components:**
```bash
npm run test:battles:shared
npm run test:battles            # All battle tests affected
npm run test:ci                 # Full suite
```

#### Documentation Location

Complete plan available in:
- BATTLE_PAGES_TEST_CENTRALIZATION_PLAN.txt (detailed implementation guide)
- BATTLE_TEST_PLAN_EXECUTIVE_SUMMARY.txt (overview)

---

PLACEMENT IN AGENTS.MD
======================

This section should be added:

OPTION 1: New section under "ðŸ›  Validation Commands"
  After existing validation command examples

OPTION 2: New subsection under testing
  Create "### Battle Pages Critical Testing" header

OPTION 3: In the "ðŸ§ª Unit Test Quality Standards" section
  Add "Battle Pages Regression Testing" subsection

RECOMMENDED: Option 2 - Create new clear section for visibility


RELATED EXISTING SECTIONS IN AGENTS.MD
======================================

This new section complements:
- "ðŸ›  Validation Commands" - npm scripts
- "ðŸ§ª Unit Test Quality Standards" - test patterns
- "ðŸŽ¯ Core Principles" - maintain repo quality
- "âœ… Evaluation Criteria" - testing requirements
- "ðŸ§ª Task Contract" - what needs testing


BACKWARD COMPATIBILITY
======================

This update is fully backward compatible:
- Existing tests continue to work
- Old commands like npm run test work unchanged
- New commands are additive only
- Can be phased in gradually


IMPLEMENTATION NOTE
===================

Once tests are migrated to tests/battles-regressions/, this section will be:
1. Automatically accurate (commands work as documented)
2. The canonical reference for battle page testing
3. Required reading for anyone modifying critical pages
4. A pattern that can be extended to other critical pages


FUTURE EXTENSIONS
=================

This pattern can be extended to other critical pages:
- Browse Judoka page
- Settings page
- Tooltip viewer page

Same structure: tests/features-regressions/{feature-name}/


END OF RECOMMENDED AGENTS.MD UPDATES
====================================
