      "text": "timers elapse so the ui remains responsive. ## prioritized functional requirements p1 - state graph: publish the full state graph with names (e.g., idle, roundprompt, countdown, waitingforselection, resolving, roundresolved). acceptance criteria: - a diagram and a machine-readable list of states and transitions are included. p1 - timeout policies: define timeout durations for selection, countdown, and other time-sensitive states and specify auto-select behavior. acceptance criteria: - each time-sensitive state includes a default timeout and the auto-select/fallback behavior. p2 - test hooks: document promises/event names exposed for tests (e.g., `getroundpromptpromise`, `getcountdownstartedpromise`, `getroundresolvedpromise`, `getroundtimeoutpromise`, `getstatselectionstalledpromise`). acceptance criteria: - the list matches the helpers referenced in `design/testing/classicbattletesting.md` and `prdTestMode.md#mode-interactions-and-automation-hooks`. p2 - recovery paths: define how the state machine recovers from failed transitions (e.g.",
      "text": "the helpers referenced in `design/testing/classicbattletesting.md` and `prdTestMode.md#mode-interactions-and-automation-hooks`. p2 - recovery paths: define how the state machine recovers from failed transitions (e.g. , missing orchestrator, event failures). acceptance criteria: - recovery behaviors are documented and include example error flows.",
      "text": "deterministic in `testmode` (seeded rng). - orchestrator-missing paths reproduce the same external events (same event names/payloads) so consumers are unaffected. ## test hooks / observable promises the state machine exposes or coordinates the following test hooks (used by playwright helpers and unit tests): - `getroundpromptpromise` — resolves when `roundprompt` is active. - `getcountdownstartedpromise` — resolves when `countdown` begins. - `getroundresolvedpromise` — resolves when `roundresolved` is entered. - `getroundtimeoutpromise` — resolves when `waitingforselection` times out. - `getstatselectionstalledpromise` — resolves when a selection stall is detected (before auto-select). acceptance criteria (test hooks): - the list of promises and event names matches `design/testing/classicbattletesting.md` and `prdTestMode.md#mode-interactions-and-automation-hooks`. - playwright fixtures and test helpers consume these promises to deterministically await state transitions.",
      "text": "matches `design/testing/classicbattletesting.md` and `prdTestMode.md#mode-interactions-and-automation-hooks`. - playwright fixtures and test helpers consume these promises to deterministically await state transitions. ## recovery paths and error handling - event emission failures: if an event cannot be emitted, the state machine retries emission twice with exponential backoff and logs the failure; tests must expect retry attempts. - unrecoverable errors during `resolving` should move the machine to `roundresolved` with `details.error` populated to allow ui to show an error and continue the match if possible. acceptance criteria (recovery): - retry policy documented and example error payloads provided for consumers.",
      "text": "`prdbattlecli.md`. - `design/codestandards/` already holds deep dives referenced by `prdcodestandards.md`; make sure those references stay canonical when content moves. ## inventory & mapping (docs → prd home) - `docs/battle-cli.md` / `docs/battlecli.md` → `design/productrequirementsdocuments/prdbattlecli.md` (exists; merge usage + module structure into prd appendix and collapse duplicate markdown once prd is authoritative). - `docs/round-selection.md` → `prdroundselection.md` (exists). - `docs/vector-search.md` → `prdvectordatabaserag.md` (exists). - `docs/rag-system.md` → `prdvectordatabaserag.md` (prd covers rag operations; incorporate agent usage guidance or reference it from prd). - `docs/testing-modes.md` → `prdtestmode.md#mode-interactions-and-automation-hooks` and `prdtestingstandards.md` (exists; split mode taxonomy vs helper apis). - `docs/testing-guide.md` / `docs/validation-commands.md` / `docs/testvaluepolicy.md` → `prdtestingstandards.md` plus `prdcodestandards.md` (exists; ensure evaluation rubrics and command matrix live in prds). - `docs/components.md` → `prduidesignsystem.md` (exists). - `docs/roundui.md` → `prdbattlemarkup.md` or `prduidesignsystem.",
      "text": "helper governance (optional)** – if helper apis require explicit owners and change control, introduce `prdtesthelpers.md`; otherwise add a dedicated section to `prdtestingstandards.md`. ## documents to assimilate or cross-reference - `docs/technical/eventnamingaudit.md`, `design/eventnamingaudit.md`, `design/eventaudit/*.txt` → combine into `prdeventcontracts.md` with an audit appendix; leave a stub readme pointing to the prd. - `docs/technical/statehandleraudit.md` & `design/statehandleraudit.md` → integrate diagrams + compliance table into `prdstatehandler.md`. - `docs/technical/battlemarkup.md` & `design/battlemarkup.md` → integrate canonical markup into `prdbattlemarkup.md`; reference `design/dataschemas/battlemarkup.json` and `battlemarkup.generated.js`. - `docs/testing-modes.md` (covered by `prdtestmode.md#mode-interactions-and-automation-hooks`), `docs/testing-guide.md`, `docs/testvaluepolicy.md`, `design/codestandards/evaluatingplaywrighttests.md`, `design/codestandards/evaluatingunittests.md` → consolidate into `prdtestingstandards.md` with clear subsections for agent vs human workflows. - `docs/validation-commands.md` → split command matrix between `prdtestingstandards.md` (test suite) and `prddevelopmentstandards.",
      "text": "guidance supports the ui design system and should be consolidated under `prduidesignsystem.md`. - `docs/product-docs.md` -> `prdprdviewer.md` - action: stub (create redirect stub pointing to `prdprdviewer. md` and note owner) - rationale: this is documentation about product docs themselves; the prd viewer prd is the natural owner. - `docs/rag-system.md` -> `prdvectordatabaserag.md` - action: assimilate (append agent usage guidance and provenance rules) - rationale: the rag usage and agent workflow belong with the vector/rag prd. - `docs/roundui.md` -> `prdbattlemarkup.md` (or `prduidesignsystem.md`) - action: decide + assimilate (prefer `prdbattlemarkup.md` for dom contract content; move style/ux guidance to `prduidesignsystem.md`) - rationale: round ui contains both markup contract and styling guidance; split accordingly. - `docs/testing-guide.md` -> `prdtestingstandards.md` - action: assimilate (merge testing how-tos and actionable commands into prd sections) - rationale: operational testing guidance should live in the testing standards prd alongside validation commands and policies. - `docs/testing-modes.md` -> `prdtestmode.md#mode-interactions-and-automation-hooks` + `prdtestingstandards.",
      "text": "prd sections) - rationale: operational testing guidance should live in the testing standards prd alongside validation commands and policies. - `docs/testing-modes.md` -> `prdtestmode.md#mode-interactions-and-automation-hooks` + `prdtestingstandards. md` - action: assimilate (taxonomy into `prdtestmode.md`, enforcement and rubrics into `prdtestingstandards.md`) - rationale: mode definitions and test runner modes deserve a small dedicated prd but must be cross-linked to standards. - `docs/validation-commands.md` -> `prdtestingstandards.md` + `prddevelopmentstandards.md` - action: split & assimilate (test-run commands into testing prd; agent/dev workflow commands into dev standards prd) - rationale: the command matrix serves both test operations and developer/agent workflows; split reduces prd scope creep. - `docs/vector-search.md` -> `prdvectordatabaserag.md` (verify) - action: confirm assimilation (ensure appendix contains the workflow and remove source or add stub) - rationale: vector search content belongs in the rag prd; if not already fully merged, finish assimilation. - `design/battlecli-legacy-alignment.md` -> `prdbattlecli.",