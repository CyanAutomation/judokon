{
  "modules": {
    "src/gameBootstrap.js": {
      "imports": ["./game.js"],
      "functions": {}
    },
    "src/game.js": {
      "imports": [
        "./helpers/dataUtils.js",
        "./helpers/carouselBuilder.js",
        "./helpers/randomCard.js",
        "./helpers/constants.js",
        "./helpers/motionUtils.js",
        "./helpers/tooltip.js",
        "./helpers/cardUtils.js",
        "./helpers/featureFlags.js",
        "./helpers/debug.js"
      ],
      "functions": {
        "setupCarouselToggle": {
          "calls": [
            "warn",
            "remove",
            "error",
            "fetchJson",
            "isArray",
            "validateData",
            "push",
            "buildCardCarousel",
            "appendChild",
            "querySelector",
            "initScrollMarkers",
            "debugLog",
            "addEventListener"
          ],
          "patterns": []
        },
        "handleClick": {
          "calls": [
            "remove",
            "error",
            "fetchJson",
            "isArray",
            "validateData",
            "push",
            "buildCardCarousel",
            "appendChild",
            "querySelector",
            "initScrollMarkers",
            "debugLog"
          ],
          "patterns": []
        },
        "setupHideCardButton": {
          "calls": [
            "addEventListener",
            "querySelector",
            "error",
            "querySelectorAll",
            "forEach",
            "toggle"
          ],
          "patterns": []
        },
        "setupRandomCardButton": {
          "calls": ["addEventListener", "add", "shouldReduceMotionSync", "generateRandomCard"],
          "patterns": []
        },
        "initGame": {
          "calls": [
            "getElementById",
            "initFeatureFlags",
            "isEnabled",
            "toggleInspectorPanels",
            "addEventListener",
            "setupCarouselToggle",
            "setupHideCardButton",
            "setupRandomCardButton",
            "initTooltips"
          ],
          "patterns": []
        }
      }
    },
    "tests/waitFor.js": {
      "imports": ["vitest"],
      "functions": {
        "waitFor": {
          "calls": ["toBe", "poll", "predicate"],
          "patterns": []
        }
      }
    },
    "tests/setup.js": {
      "imports": ["vitest", "./utils/testUtils.js", "./utils/console.js"],
      "functions": {}
    },
    "scripts/validateData.js": {
      "imports": [
        "glob",
        "node:path",
        "node:url",
        "node:fs",
        "node:fs/promises",
        "ajv",
        "ajv-formats"
      ],
      "functions": {}
    },
    "scripts/runPa11y.js": {
      "imports": ["child_process", "path", "url"],
      "functions": {
        "waitForOutput": {
          "calls": [
            "test",
            "toString",
            "cleanup",
            "resolve",
            "setTimeout",
            "reject",
            "clearTimeout",
            "off",
            "on"
          ],
          "patterns": []
        },
        "onData": {
          "calls": ["test", "toString", "cleanup", "resolve"],
          "patterns": []
        },
        "cleanup": {
          "calls": ["clearTimeout", "off"],
          "patterns": []
        },
        "runCommand": {
          "calls": ["spawn", "on", "resolve"],
          "patterns": []
        }
      }
    },
    "scripts/playwrightServer.js": {
      "imports": ["http", "fs", "path", "url"],
      "functions": {
        "getContentType": {
          "calls": ["toLowerCase", "extname"],
          "patterns": []
        }
      }
    },
    "scripts/networkProbe.js": {
      "imports": ["playwright"],
      "functions": {}
    },
    "scripts/generatePrdIndex.js": {
      "imports": ["node:fs/promises"],
      "functions": {}
    },
    "scripts/generateEmbeddings.js": {
      "imports": [
        "node:fs/promises",
        "node:fs",
        "node:path",
        "node:url",
        "glob",
        "@xenova/transformers",
        "acorn",
        "estree-walker"
      ],
      "functions": {
        "flattenObject": {
          "calls": ["reduce", "entries", "isArray", "assign", "flattenObject"],
          "patterns": []
        },
        "chunkMarkdown": {
          "calls": ["split", "test", "trim", "join", "slice", "push", "exec"],
          "patterns": []
        },
        "chunkCode": {
          "calls": [
            "parse",
            "add",
            "startsWith",
            "test",
            "slice",
            "callName",
            "walk",
            "from",
            "push",
            "join",
            "filter",
            "gatherReferences",
            "pop",
            "findJsDoc"
          ],
          "patterns": []
        },
        "findJsDoc": {
          "calls": ["startsWith", "test", "slice"],
          "patterns": []
        },
        "callName": {
          "calls": ["callName"],
          "patterns": []
        },
        "gatherReferences": {
          "calls": ["walk", "callName", "add", "from"],
          "patterns": []
        },
        "createQaContext": {
          "calls": ["trim", "replace", "match", "slice"],
          "patterns": ["factory"]
        },
        "getFiles": {
          "calls": ["glob", "filter", "extname", "includes", "basename"],
          "patterns": []
        },
        "loadModel": {
          "calls": ["pipeline"],
          "patterns": []
        },
        "determineTags": {
          "calls": ["basename", "push", "startsWith"],
          "patterns": []
        },
        "determineIntent": {
          "calls": ["toLowerCase", "test"],
          "patterns": []
        },
        "determineRole": {
          "calls": ["test"],
          "patterns": []
        },
        "buildMetadata": {
          "calls": ["determineRole"],
          "patterns": []
        },
        "generate": {
          "calls": [
            "join",
            "parse",
            "readFile",
            "getFiles",
            "loadModel",
            "createWriteStream",
            "write",
            "byteLength",
            "stringify",
            "end",
            "basename",
            "extname",
            "test",
            "includes",
            "determineTags",
            "isArray",
            "entries",
            "determineIntent",
            "buildMetadata",
            "add",
            "from",
            "extractor",
            "createQaContext",
            "writeEntry",
            "map",
            "Number",
            "toFixed",
            "flattenObject",
            "chunkMarkdown",
            "chunkCode",
            "on",
            "stat",
            "writeFile"
          ],
          "patterns": []
        },
        "writeEntry": {
          "calls": ["stringify", "byteLength", "end", "write"],
          "patterns": []
        }
      }
    },
    "scripts/generateCodeGraphs.js": {
      "imports": ["node:fs/promises", "node:path", "node:url", "glob", "acorn", "estree-walker"],
      "functions": {
        "getCallName": {
          "calls": ["getCallName"],
          "patterns": []
        },
        "gatherCalls": {
          "calls": ["walk", "getCallName", "add", "from"],
          "patterns": []
        },
        "detectPatterns": {
          "calls": ["test", "push", "includes"],
          "patterns": []
        },
        "analyzeFile": {
          "calls": [
            "readFile",
            "join",
            "parse",
            "push",
            "walk",
            "gatherCalls",
            "detectPatterns",
            "from"
          ],
          "patterns": []
        },
        "generate": {
          "calls": ["glob", "analyzeFile", "writeFile", "join", "stringify"],
          "patterns": []
        }
      }
    },
    "scripts/diagnosePlaywrightNode.js": {
      "imports": ["playwright"],
      "functions": {}
    },
    "scripts/diagnosePlaywrightInteractive.js": {
      "imports": ["playwright", "./lib/debugUtils.js"],
      "functions": {
        "run": {
          "calls": [
            "buildBaseUrl",
            "launch",
            "newContext",
            "newPage",
            "installSelectorGuard",
            "attachLoggers",
            "log",
            "goto",
            "waitButtonsReady",
            "getStatButtons",
            "find",
            "tryClickStat",
            "waitForTimeout",
            "getBattleSnapshot",
            "push",
            "trim",
            "$",
            "getAttribute",
            "click",
            "stringify",
            "takeScreenshot",
            "close"
          ],
          "patterns": []
        }
      }
    },
    "scripts/diagnosePlaywright.spec.js": {
      "imports": ["@playwright/test"],
      "functions": {}
    },
    "scripts/diagnosePlaywright.js": {
      "imports": ["@playwright/test"],
      "functions": {}
    },
    "scripts/debugSnackbar.js": {
      "imports": ["playwright"],
      "functions": {}
    },
    "scripts/debugBattleProgression.js": {
      "imports": ["playwright", "./lib/debugUtils.js"],
      "functions": {}
    },
    "playwright/waits-timeout.spec.js": {
      "imports": ["./fixtures/commonSetup.js", "./fixtures/waits.js"],
      "functions": {}
    },
    "playwright/vector-search.spec.js": {
      "imports": ["./fixtures/commonSetup.js"],
      "functions": {}
    },
    "playwright/tooltip.spec.js": {
      "imports": ["./fixtures/commonSetup.js"],
      "functions": {}
    },
    "playwright/status-aria-attributes.spec.js": {
      "imports": ["./fixtures/commonSetup.js", "./fixtures/waits.js"],
      "functions": {}
    },
    "playwright/static-pages.spec.js": {
      "imports": ["./fixtures/commonSetup.js", "./fixtures/navigationChecks.js"],
      "functions": {}
    },
    "playwright/statReset.spec.js": {
      "imports": ["./fixtures/commonSetup.js", "./fixtures/waits.js"],
      "functions": {}
    },
    "playwright/settings.spec.js": {
      "imports": [
        "./fixtures/commonSetup.js",
        "./fixtures/waits.js",
        "fs",
        "wcag-contrast",
        "../src/helpers/settingsUtils.js",
        "./fixtures/navigationChecks.js"
      ],
      "functions": {
        "getLabelData": {
          "calls": ["filter", "map", "sort", "slice", "find", "keys"],
          "patterns": []
        },
        "rgbToHex": {
          "calls": ["map", "split", "replace", "parseInt", "trim", "join", "padStart", "toString"],
          "patterns": []
        }
      }
    },
    "playwright/settings-screenshot.spec.js": {
      "imports": ["./fixtures/commonSetup.js", "./fixtures/waits.js"],
      "functions": {}
    },
    "playwright/screenshot.spec.js": {
      "imports": ["./fixtures/commonSetup.js"],
      "functions": {}
    },
    "playwright/responsive-contrast.spec.js": {
      "imports": ["./fixtures/commonSetup.js", "./fixtures/waits.js"],
      "functions": {}
    },
    "playwright/random-judoka.spec.js": {
      "imports": ["./fixtures/commonSetup.js", "./fixtures/navigationChecks.js"],
      "functions": {
        "hexToRgb": {
          "calls": ["replace", "parseInt", "slice"],
          "patterns": []
        }
      }
    },
    "playwright/pseudo-japanese-toggle.spec.js": {
      "imports": ["path", "url", "./fixtures/commonSetup.js", "./fixtures/navigationChecks.js"],
      "functions": {}
    },
    "playwright/prd-reader.spec.js": {
      "imports": ["./fixtures/commonSetup.js", "./fixtures/navigationChecks.js"],
      "functions": {}
    },
    "playwright/navigation-links.spec.js": {
      "imports": ["./fixtures/commonSetup.js", "./fixtures/navigationChecks.js"],
      "functions": {}
    },
    "playwright/meditation-screen.spec.js": {
      "imports": ["./fixtures/commonSetup.js", "./fixtures/navigationChecks.js"],
      "functions": {}
    },
    "playwright/homepage.spec.js": {
      "imports": ["./fixtures/commonSetup.js", "./fixtures/navigationChecks.js"],
      "functions": {
        "parse": {
          "calls": ["map", "match"],
          "patterns": []
        },
        "luminance": {
          "calls": ["map", "pow"],
          "patterns": []
        }
      }
    },
    "playwright/homepage-layout.spec.js": {
      "imports": ["./fixtures/commonSetup.js"],
      "functions": {}
    },
    "playwright/classicBattleFlow.spec.js": {
      "imports": [
        "./fixtures/commonSetup.js",
        "./fixtures/waits.js",
        "fs",
        "path",
        "../tests/helpers/battleTestUtils.js"
      ],
      "functions": {}
    },
    "playwright/card-inspector-accessibility.spec.js": {
      "imports": ["./fixtures/commonSetup.js", "node:fs", "node:path", "node:url"],
      "functions": {}
    },
    "playwright/browse-judoka.spec.js": {
      "imports": ["./fixtures/commonSetup.js", "./fixtures/navigationChecks.js"],
      "functions": {
        "swipe": {
          "calls": ["evaluate", "querySelector", "dispatchEvent"],
          "patterns": []
        }
      }
    },
    "playwright/battle-state-progress.spec.js": {
      "imports": [
        "./fixtures/commonSetup.js",
        "./fixtures/waits.js",
        "./fixtures/classicBattleStates.js"
      ],
      "functions": {}
    },
    "playwright/battle-orientation.spec.js": {
      "imports": ["./fixtures/commonSetup.js", "./fixtures/waits.js"],
      "functions": {}
    },
    "src/vendor/marked.esm.js": {
      "imports": [],
      "functions": {
        "renderInline": {
          "calls": ["replace"],
          "patterns": []
        },
        "renderList": {
          "calls": ["forEach", "match", "floor", "test", "pop", "renderInline", "push"],
          "patterns": []
        },
        "renderTable": {
          "calls": [
            "filter",
            "test",
            "trim",
            "startsWith",
            "slice",
            "endsWith",
            "map",
            "split",
            "splitRow",
            "join",
            "renderInline"
          ],
          "patterns": []
        },
        "splitRow": {
          "calls": ["trim", "startsWith", "slice", "endsWith", "map", "split"],
          "patterns": []
        }
      }
    },
    "src/vendor/ajv6.min.js": {
      "imports": [],
      "functions": {
        "ue": {
          "calls": ["O"],
          "patterns": []
        },
        "h": {
          "calls": ["message", "url", "normalizeId", "fullPath"],
          "patterns": []
        },
        "f": {
          "calls": ["replace"],
          "patterns": []
        },
        "d": {
          "calls": ["normalizeId"],
          "patterns": []
        },
        "m": {
          "calls": ["test", "del"],
          "patterns": []
        },
        "S": {
          "calls": ["w"],
          "patterns": []
        },
        "e": {
          "calls": ["Array", "slice", "join"],
          "patterns": []
        },
        "p": {
          "calls": ["replace"],
          "patterns": []
        },
        "s": {
          "calls": [],
          "patterns": []
        },
        "a": {
          "calls": [
            "copy",
            "v",
            "w",
            "addFormat",
            "addKeyword",
            "O",
            "addMetaSchema",
            "S",
            "isArray",
            "addSchema"
          ],
          "patterns": []
        },
        "_": {
          "calls": ["warn"],
          "patterns": []
        },
        "n": {
          "calls": ["slice", "split", "unescapeFragment", "_getId", "d", "call"],
          "patterns": []
        },
        "B": {
          "calls": [
            "match",
            "parseInt",
            "isNaN",
            "indexOf",
            "Z",
            "H",
            "toLowerCase",
            "N",
            "toASCII",
            "replace",
            "parse"
          ],
          "patterns": []
        },
        "dr": {
          "calls": ["call", "c", "a", "processCode", "error"],
          "patterns": []
        },
        "lr": {
          "calls": ["url", "Pr", "Y", "call", "inlineRef"],
          "patterns": []
        },
        "Y": {
          "calls": [],
          "patterns": []
        },
        "Pr": {
          "calls": [],
          "patterns": []
        },
        "ur": {
          "calls": ["match", "replace", "pop", "slice", "push", "join"],
          "patterns": []
        },
        "mr": {
          "calls": [
            "toLowerCase",
            "serialize",
            "test",
            "toUnicode",
            "toASCII",
            "replace",
            "N",
            "push",
            "Z",
            "H",
            "String",
            "join",
            "charAt",
            "ur"
          ],
          "patterns": []
        },
        "br": {
          "calls": ["B", "mr", "ur", "charAt", "slice", "lastIndexOf"],
          "patterns": []
        },
        "l": {
          "calls": ["isArray", "Object", "iterator", "next", "push", "return"],
          "patterns": []
        },
        "g": {
          "calls": ["push"],
          "patterns": []
        },
        "v": {
          "calls": ["toUpperCase"],
          "patterns": []
        },
        "w": {
          "calls": ["e", "t", "join"],
          "patterns": []
        },
        "r": {
          "calls": [],
          "patterns": []
        },
        "J": {
          "calls": ["er"],
          "patterns": []
        },
        "er": {
          "calls": [],
          "patterns": []
        },
        "t": {
          "calls": [],
          "patterns": []
        },
        "c": {
          "calls": ["toLowerCase", "shift", "split", "pop", "call"],
          "patterns": []
        },
        "P": {
          "calls": ["warn"],
          "patterns": []
        },
        "F": {
          "calls": [],
          "patterns": []
        },
        "x": {
          "calls": [],
          "patterns": []
        },
        "y": {
          "calls": [],
          "patterns": []
        },
        "i": {
          "calls": ["lastIndexOf", "charCodeAt", "P", "push", "d", "y", "splice", "apply"],
          "patterns": []
        },
        "E": {
          "calls": ["F", "iterator", "next", "push", "m", "return", "d", "P", "x", "y", "join"],
          "patterns": []
        },
        "I": {
          "calls": ["apply"],
          "patterns": []
        },
        "k": {
          "calls": ["parseInt", "substr", "fromCharCode"],
          "patterns": []
        },
        "N": {
          "calls": ["k", "match", "replace", "toLowerCase", "String"],
          "patterns": []
        },
        "b": {
          "calls": ["k", "match"],
          "patterns": []
        },
        "V": {
          "calls": ["replace"],
          "patterns": []
        },
        "H": {
          "calls": ["match", "l", "join", "map", "split"],
          "patterns": []
        },
        "Z": {
          "calls": [
            "match",
            "l",
            "reverse",
            "split",
            "toLowerCase",
            "map",
            "test",
            "Array",
            "H",
            "sort",
            "reduce",
            "push",
            "slice",
            "join"
          ],
          "patterns": []
        },
        "q": {
          "calls": ["replace", "toString"],
          "patterns": []
        },
        "ar": {
          "calls": ["toLowerCase", "String"],
          "patterns": []
        },
        "qr": {
          "calls": ["k", "match"],
          "patterns": []
        }
      }
    },
    "src/utils/scheduler.js": {
      "imports": [],
      "functions": {
        "start": {
          "calls": ["forEach", "cb", "floor", "requestAnimationFrame"],
          "patterns": []
        },
        "loop": {
          "calls": ["forEach", "cb", "floor", "requestAnimationFrame"],
          "patterns": []
        },
        "onFrame": {
          "calls": ["set"],
          "patterns": []
        },
        "onSecondTick": {
          "calls": ["set"],
          "patterns": []
        },
        "cancel": {
          "calls": ["delete"],
          "patterns": []
        },
        "stop": {
          "calls": ["cancelAnimationFrame", "clear"],
          "patterns": []
        }
      }
    },
    "src/utils/deepMerge.js": {
      "imports": [],
      "functions": {
        "deepMerge": {
          "calls": ["entries", "isPlainObject", "deepMerge", "isArray"],
          "patterns": []
        },
        "isPlainObject": {
          "calls": ["isArray"],
          "patterns": []
        }
      }
    },
    "src/utils/debounce.js": {
      "imports": [],
      "functions": {
        "debounce": {
          "calls": ["resolve", "fn", "reject", "clear", "onCancel", "set", "run"],
          "patterns": []
        },
        "run": {
          "calls": ["resolve", "fn", "reject"],
          "patterns": []
        },
        "debounced": {
          "calls": ["clear", "resolve", "reject", "onCancel", "set", "run"],
          "patterns": []
        }
      }
    },
    "src/utils/countryCodes.js": {
      "imports": ["../helpers/dataUtils.js", "../helpers/constants.js"],
      "functions": {
        "loadMapping": {
          "calls": ["catch", "fetchJson", "warn", "importJsonModule"],
          "patterns": []
        },
        "normalizeCode": {
          "calls": ["toLowerCase", "trim", "test"],
          "patterns": []
        },
        "getCountryByCode": {
          "calls": ["normalizeCode", "loadMapping"],
          "patterns": []
        },
        "getCodeByCountry": {
          "calls": ["trim", "loadMapping", "toLowerCase", "values"],
          "patterns": []
        },
        "toArray": {
          "calls": ["loadMapping", "sort", "filter", "values", "localeCompare"],
          "patterns": []
        },
        "listCountries": {
          "calls": ["toArray", "map"],
          "patterns": []
        }
      }
    },
    "src/helpers/viewportDebug.js": {
      "imports": [],
      "functions": {
        "toggleViewportSimulation": {
          "calls": ["toggle", "Boolean"],
          "patterns": []
        }
      }
    },
    "src/helpers/viewTransition.js": {
      "imports": [],
      "functions": {
        "withViewTransition": {
          "calls": ["startViewTransition", "fn"],
          "patterns": []
        }
      }
    },
    "src/helpers/vectorSearchQuery.js": {
      "imports": ["./dataUtils.js", "./constants.js"],
      "functions": {
        "loadSynonyms": {
          "calls": ["catch", "fetchJson"],
          "patterns": []
        },
        "levenshtein": {
          "calls": ["from", "min"],
          "patterns": []
        },
        "expandQueryWithSynonyms": {
          "calls": [
            "loadSynonyms",
            "toLowerCase",
            "filter",
            "split",
            "entries",
            "isArray",
            "some",
            "includes",
            "levenshtein",
            "forEach",
            "add",
            "join"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/vectorSearchPage.js": {
      "imports": [
        "./domReady.js",
        "./vectorSearch/index.js",
        "./markdownToHtml.js",
        "./dataUtils.js",
        "./constants.js",
        "./vectorSearchPage/queryUi.js",
        "./vectorSearchPage/renderResults.js",
        "./api/vectorSearchPage.js",
        "./sanitizeHtml.js",
        "../components/Spinner.js"
      ],
      "functions": {
        "loadResultContext": {
          "calls": [
            "querySelector",
            "fetchContextById",
            "isArray",
            "join",
            "getSanitizer",
            "sanitize",
            "markdownToHtml",
            "setAttribute",
            "error"
          ],
          "patterns": []
        },
        "isIterable": {
          "calls": [],
          "patterns": []
        },
        "buildQueryVector": {
          "calls": [
            "filter",
            "split",
            "toLowerCase",
            "expandQueryWithSynonyms",
            "getExtractor",
            "model",
            "isIterable",
            "from"
          ],
          "patterns": []
        },
        "selectTopMatches": {
          "calls": ["filter", "slice"],
          "patterns": []
        },
        "handleSearch": {
          "calls": [
            "preventDefault",
            "prepareSearchUi",
            "finalizeSearchUi",
            "resolveResultsPromise",
            "getSelectedTags",
            "showSearching",
            "buildQueryVector",
            "findMatches",
            "handleNoMatches",
            "renderSearchResults",
            "error",
            "hide"
          ],
          "patterns": []
        },
        "renderSearchResults": {
          "calls": [
            "selectTopMatches",
            "add",
            "renderResults",
            "queueMicrotask",
            "resolveResultsPromise"
          ],
          "patterns": []
        },
        "showSearching": {
          "calls": ["show", "remove"],
          "patterns": []
        },
        "finalizeSearchUi": {
          "calls": ["remove", "hide"],
          "patterns": []
        },
        "handleNoMatches": {
          "calls": ["add"],
          "patterns": []
        },
        "init": {
          "calls": [
            "preloadExtractor",
            "querySelector",
            "createSpinner",
            "getElementById",
            "all",
            "loadEmbeddings",
            "catch",
            "fetchJson",
            "error",
            "hide",
            "attachFormHandlers",
            "maybeWarnVersionMismatch",
            "populateTagFilter",
            "updateStats"
          ],
          "patterns": []
        },
        "maybeWarnVersionMismatch": {
          "calls": [
            "hasEntryVersionMismatch",
            "hasMetaMismatch",
            "querySelector",
            "createElement",
            "appendChild"
          ],
          "patterns": []
        },
        "hasEntryVersionMismatch": {
          "calls": ["isArray", "debug"],
          "patterns": []
        },
        "hasMetaMismatch": {
          "calls": ["debug"],
          "patterns": []
        },
        "escapeHtml": {
          "calls": ["replace"],
          "patterns": []
        },
        "populateTagFilter": {
          "calls": [
            "getElementById",
            "isArray",
            "forEach",
            "add",
            "join",
            "map",
            "sort",
            "escapeHtml"
          ],
          "patterns": []
        },
        "updateStats": {
          "calls": ["getElementById"],
          "patterns": []
        },
        "attachFormHandlers": {
          "calls": ["addEventListener", "preventDefault", "requestSubmit"],
          "patterns": []
        }
      }
    },
    "src/helpers/utils.js": {
      "imports": ["./debug.js"],
      "functions": {
        "escapeHTML": {
          "calls": ["replace", "String"],
          "patterns": []
        },
        "decodeHTML": {
          "calls": ["replace", "String"],
          "patterns": []
        },
        "getValue": {
          "calls": ["trim"],
          "patterns": []
        },
        "formatDate": {
          "calls": [
            "isNaN",
            "getTime",
            "split",
            "toISOString",
            "trim",
            "match",
            "map",
            "getUTCFullYear",
            "getUTCMonth",
            "getUTCDate"
          ],
          "patterns": []
        },
        "createGokyoLookup": {
          "calls": ["isArray", "error", "reduce", "isNaN", "warn", "debugLog"],
          "patterns": ["factory"]
        }
      }
    },
    "src/helpers/typewriter.js": {
      "imports": ["./settingsCache.js"],
      "functions": {
        "shouldEnableTypewriter": {
          "calls": ["Boolean", "getSetting"],
          "patterns": []
        },
        "runTypewriterEffect": {
          "calls": ["cancelAnimationFrame", "charAt", "requestAnimationFrame"],
          "patterns": []
        },
        "step": {
          "calls": ["cancelAnimationFrame", "charAt", "requestAnimationFrame"],
          "patterns": []
        }
      }
    },
    "src/helpers/types.js": {
      "imports": [],
      "functions": {}
    },
    "src/helpers/tooltipViewerPage.js": {
      "imports": [
        "./tooltip.js",
        "./constants.js",
        "./domReady.js",
        "../components/PreviewToggle.js",
        "./tooltipViewer/extractLineAndColumn.js",
        "./tooltipViewer/renderList.js",
        "./sanitizeHtml.js"
      ],
      "functions": {
        "setTooltipSnackbar": {
          "calls": [],
          "patterns": []
        },
        "setTooltipDataLoader": {
          "calls": [],
          "patterns": []
        },
        "loadTooltipData": {
          "calls": [
            "tooltipDataLoader",
            "fetchJson",
            "flattenTooltips",
            "error",
            "extractLineAndColumn"
          ],
          "patterns": []
        },
        "initSearchFilter": {
          "calls": [
            "clearTimeout",
            "setTimeout",
            "updateList",
            "addEventListener",
            "removeEventListener"
          ],
          "patterns": []
        },
        "handler": {
          "calls": ["clearTimeout", "setTimeout", "updateList"],
          "patterns": []
        },
        "bindCopyButtons": {
          "calls": [
            "queryCommandSupported",
            "snackbarFnOverride",
            "catch",
            "then",
            "getSnackbar",
            "showSnackbar",
            "createElement",
            "setAttribute",
            "appendChild",
            "select",
            "execCommand",
            "remove",
            "showMessage",
            "writeText",
            "fallbackCopy",
            "add",
            "setTimeout",
            "addEventListener",
            "copy"
          ],
          "patterns": []
        },
        "getSnackbar": {
          "calls": [],
          "patterns": []
        },
        "showMessage": {
          "calls": ["snackbarFnOverride", "catch", "then", "getSnackbar", "showSnackbar"],
          "patterns": []
        },
        "fallbackCopy": {
          "calls": [
            "createElement",
            "setAttribute",
            "appendChild",
            "select",
            "execCommand",
            "remove"
          ],
          "patterns": []
        },
        "copy": {
          "calls": ["writeText", "fallbackCopy", "showMessage", "add", "setTimeout", "remove"],
          "patterns": []
        },
        "applyHashSelection": {
          "calls": [
            "decodeURIComponent",
            "slice",
            "querySelector",
            "String",
            "select",
            "scrollIntoView"
          ],
          "patterns": []
        },
        "setupTooltipViewerPage": {
          "calls": [
            "getSanitizer",
            "catch",
            "then",
            "bind",
            "getElementById",
            "loadTooltipData",
            "renderList",
            "findIndex",
            "from",
            "listSelect",
            "parseTooltipText",
            "sanitize",
            "remove",
            "add",
            "reset",
            "update",
            "bindCopyButtons",
            "requestIdleCallback",
            "initSearchFilter",
            "addEventListener",
            "updateList",
            "applyHashSelection",
            "initTooltips"
          ],
          "patterns": []
        },
        "sanitize": {
          "calls": [],
          "patterns": []
        },
        "updateList": {
          "calls": ["renderList"],
          "patterns": []
        },
        "select": {
          "calls": [
            "findIndex",
            "from",
            "listSelect",
            "parseTooltipText",
            "sanitize",
            "remove",
            "add",
            "reset",
            "update"
          ],
          "patterns": []
        },
        "initTooltipViewerPage": {
          "calls": ["setupTooltipViewerPage"],
          "patterns": []
        }
      }
    },
    "src/helpers/tooltipOverlayDebug.js": {
      "imports": [],
      "functions": {
        "toggleTooltipOverlayDebug": {
          "calls": ["toggle", "Boolean"],
          "patterns": []
        }
      }
    },
    "src/helpers/tooltip.js": {
      "imports": [
        "./dataUtils.js",
        "./constants.js",
        "./utils.js",
        "../vendor/marked.esm.js",
        "./settingsStorage.js",
        "./tooltipOverlayDebug.js",
        "./sanitizeHtml.js",
        "./debug.js"
      ],
      "functions": {
        "flattenTooltips": {
          "calls": ["reduce", "entries", "isArray", "assign", "flattenTooltips"],
          "patterns": []
        },
        "loadTooltips": {
          "calls": ["fetchJson", "debugLog", "importJsonModule", "flattenTooltips"],
          "patterns": []
        },
        "getTooltips": {
          "calls": ["loadTooltips"],
          "patterns": []
        },
        "parseTooltipText": {
          "calls": ["escapeHTML", "match", "parseInline", "replace", "parse"],
          "patterns": []
        },
        "ensureTooltipElement": {
          "calls": ["createElement", "setAttribute", "appendChild"],
          "patterns": []
        },
        "initTooltips": {
          "calls": [
            "dispatchEvent",
            "notifyReady",
            "loadSettings",
            "Boolean",
            "toggleTooltipOverlayDebug",
            "getSanitizer",
            "loadTooltips",
            "querySelectorAll",
            "ensureTooltipElement",
            "has",
            "warn",
            "add",
            "parseTooltipText",
            "sanitize",
            "getBoundingClientRect",
            "forEach",
            "addEventListener",
            "removeEventListener"
          ],
          "patterns": []
        },
        "notifyReady": {
          "calls": ["dispatchEvent"],
          "patterns": []
        },
        "show": {
          "calls": ["has", "warn", "add", "parseTooltipText", "sanitize", "getBoundingClientRect"],
          "patterns": []
        },
        "hide": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/timerUtils.js": {
      "imports": ["./dataUtils.js", "./constants.js", "../utils/scheduler.js"],
      "functions": {
        "loadTimers": {
          "calls": ["catch", "fetchJson", "warn", "importJsonModule"],
          "patterns": []
        },
        "getDefaultTimer": {
          "calls": ["loadTimers", "find"],
          "patterns": []
        },
        "_resetForTest": {
          "calls": ["stopScheduler"],
          "patterns": []
        },
        "createCountdownTimer": {
          "calls": [
            "onTick",
            "stop",
            "onExpired",
            "pause",
            "resume",
            "onSecondTick",
            "tick",
            "error",
            "setInterval",
            "clearInterval",
            "setTimeout",
            "max",
            "floor",
            "addEventListener",
            "cancelFn",
            "clearTimeout",
            "removeEventListener"
          ],
          "patterns": ["factory"]
        },
        "tick": {
          "calls": ["onTick", "stop", "onExpired"],
          "patterns": []
        },
        "handleVisibility": {
          "calls": ["pause", "resume"],
          "patterns": []
        },
        "start": {
          "calls": [
            "stop",
            "onTick",
            "onExpired",
            "onSecondTick",
            "tick",
            "error",
            "setInterval",
            "clearInterval",
            "setTimeout",
            "max",
            "floor",
            "addEventListener"
          ],
          "patterns": []
        },
        "stop": {
          "calls": ["cancelFn", "clearTimeout", "removeEventListener"],
          "patterns": []
        },
        "pause": {
          "calls": [],
          "patterns": []
        },
        "resume": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/testModeUtils.js": {
      "imports": [],
      "functions": {
        "setTestMode": {
          "calls": ["Boolean"],
          "patterns": []
        },
        "isTestModeEnabled": {
          "calls": [],
          "patterns": []
        },
        "seededRandom": {
          "calls": ["random", "sin", "floor"],
          "patterns": []
        },
        "getCurrentSeed": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/svgFallback.js": {
      "imports": [],
      "functions": {
        "applySvgFallback": {
          "calls": ["querySelectorAll", "forEach", "addEventListener", "add"],
          "patterns": []
        }
      }
    },
    "src/helpers/storage.js": {
      "imports": ["./debug.js"],
      "functions": {
        "getItem": {
          "calls": ["getItem", "parse", "debugLog", "get"],
          "patterns": []
        },
        "setItem": {
          "calls": ["stringify", "setItem", "set", "debugLog"],
          "patterns": []
        },
        "removeItem": {
          "calls": ["removeItem", "debugLog", "delete"],
          "patterns": []
        }
      }
    },
    "src/helpers/stats.js": {
      "imports": ["./dataUtils.js", "./constants.js", "./debug.js"],
      "functions": {
        "slug": {
          "calls": ["replace", "toLowerCase"],
          "patterns": []
        },
        "loadStatNames": {
          "calls": [
            "catch",
            "fetchJson",
            "debugLog",
            "importJsonModule",
            "sort",
            "fromEntries",
            "map",
            "slug",
            "filter"
          ],
          "patterns": []
        },
        "getStatLabel": {
          "calls": ["loadStatNames"],
          "patterns": []
        }
      }
    },
    "src/helpers/snippetFormatter.js": {
      "imports": ["./utils.js"],
      "functions": {
        "highlightTerms": {
          "calls": ["escapeHTML", "isArray", "map", "replace", "join"],
          "patterns": []
        },
        "createSnippetElement": {
          "calls": [
            "createElement",
            "trimEnd",
            "slice",
            "highlightTerms",
            "appendChild",
            "add",
            "setAttribute",
            "addEventListener",
            "stopPropagation",
            "getAttribute",
            "createTextNode"
          ],
          "patterns": ["factory"]
        }
      }
    },
    "src/helpers/signatureMove.js": {
      "imports": [],
      "functions": {
        "markSignatureMoveReady": {
          "calls": ["setAttribute", "dispatchEvent", "resolveReady"],
          "patterns": []
        }
      }
    },
    "src/helpers/showSnackbar.js": {
      "imports": ["./constants.js"],
      "functions": {
        "resetState": {
          "calls": [],
          "patterns": []
        },
        "resetTimers": {
          "calls": ["clearTimeout", "getElementById", "resetState", "setTimeout", "remove"],
          "patterns": []
        },
        "showSnackbar": {
          "calls": [
            "getElementById",
            "createElement",
            "appendChild",
            "clearTimeout",
            "resetState",
            "replaceChildren",
            "requestAnimationFrame",
            "add",
            "resetTimers"
          ],
          "patterns": []
        },
        "updateSnackbar": {
          "calls": [
            "getElementById",
            "createElement",
            "appendChild",
            "clearTimeout",
            "resetState",
            "showSnackbar",
            "add",
            "resetTimers"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/showSettingsError.js": {
      "imports": ["./constants.js", "../utils/scheduler.js"],
      "functions": {
        "showSettingsError": {
          "calls": [
            "querySelector",
            "remove",
            "createElement",
            "setAttribute",
            "appendChild",
            "add",
            "cancelFrame",
            "scheduleFrame",
            "setTimeout"
          ],
          "patterns": []
        },
        "run": {
          "calls": ["add", "cancelFrame"],
          "patterns": []
        }
      }
    },
    "src/helpers/setupSvgFallback.js": {
      "imports": ["./svgFallback.js"],
      "functions": {}
    },
    "src/helpers/setupScoreboard.js": {
      "imports": ["../components/Scoreboard.js", "./scheduler.js"],
      "functions": {
        "setupScoreboard": {
          "calls": ["querySelector", "initScoreboard"],
          "patterns": []
        }
      }
    },
    "src/helpers/setupHoverZoom.js": {
      "imports": ["./domReady.js"],
      "functions": {
        "addHoverZoomMarkers": {
          "calls": [
            "querySelectorAll",
            "forEach",
            "addEventListener",
            "reset",
            "matchMedia",
            "hasAttribute"
          ],
          "patterns": []
        },
        "reset": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/setupDisplaySettings.js": {
      "imports": [
        "./displayMode.js",
        "./motionUtils.js",
        "./domReady.js",
        "./viewportDebug.js",
        "./layoutDebugPanel.js",
        "./featureFlags.js"
      ],
      "functions": {
        "init": {
          "calls": [
            "initFeatureFlags",
            "applyDisplayMode",
            "applyMotionPreference",
            "toggleViewportSimulation",
            "isEnabled",
            "toggleLayoutDebugPanel",
            "error"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/setupClassicBattleHomeLink.js": {
      "imports": ["./domReady.js", "./classicBattle/quitModal.js", "./battleInit.js"],
      "functions": {
        "setupClassicBattleHomeLink": {
          "calls": [
            "querySelector",
            "addEventListener",
            "preventDefault",
            "quitMatch",
            "markBattlePartReady",
            "setTimeout"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/setupBottomNavbar.js": {
      "imports": [
        "./navigation/navData.js",
        "./navigation/navigationUI.js",
        "./navigationBar.js",
        "./buttonEffects.js",
        "./domReady.js"
      ],
      "functions": {
        "configureBottomNavbar": {
          "calls": ["loadMenuModes", "buildMenu"],
          "patterns": []
        },
        "init": {
          "calls": [
            "setupButtonEffects",
            "setupHamburger",
            "populateNavbar",
            "configureBottomNavbar"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/settingsUtils.js": {
      "imports": [],
      "functions": {}
    },
    "src/helpers/settingsStorage.js": {
      "imports": [
        "./dataUtils.js",
        "../config/settingsDefaults.js",
        "../config/loadSettings.js",
        "./settingsCache.js",
        "../utils/debounce.js"
      ],
      "functions": {
        "setTimer": {
          "calls": ["setTimeout"],
          "patterns": []
        },
        "clearTimer": {
          "calls": ["clearTimeout"],
          "patterns": []
        },
        "setSettingsStorageTimers": {
          "calls": [],
          "patterns": []
        },
        "flushSettingsSave": {
          "calls": ["flush"],
          "patterns": []
        },
        "getSettingsSchema": {
          "calls": ["fetch", "json"],
          "patterns": []
        },
        "saveSettings": {
          "calls": ["debouncedSave"],
          "patterns": []
        },
        "loadSettings": {
          "calls": [
            "getSettingsSchema",
            "getItem",
            "parse",
            "baseLoadSettings",
            "validateWithSchema",
            "setCachedSettings",
            "debug",
            "removeItem",
            "structuredClone"
          ],
          "patterns": []
        },
        "updateSetting": {
          "calls": [
            "getSettingsSchema",
            "loadSettings",
            "getCachedSettings",
            "validateWithSchema",
            "setItem",
            "stringify",
            "setCachedSettings",
            "then",
            "catch"
          ],
          "patterns": []
        },
        "task": {
          "calls": [
            "getSettingsSchema",
            "loadSettings",
            "getCachedSettings",
            "validateWithSchema",
            "setItem",
            "stringify",
            "setCachedSettings"
          ],
          "patterns": []
        },
        "resetSettings": {
          "calls": ["setItem", "stringify", "error", "setCachedSettings", "getCachedSettings"],
          "patterns": []
        }
      }
    },
    "src/helpers/settingsPage.js": {
      "imports": [
        "./settingsStorage.js",
        "./gameModeUtils.js",
        "./showSettingsError.js",
        "./displayMode.js",
        "./viewTransition.js",
        "./motionUtils.js",
        "./domReady.js",
        "./tooltip.js",
        "../components/Modal.js",
        "../components/Button.js",
        "./viewportDebug.js",
        "./tooltipOverlayDebug.js",
        "./layoutDebugPanel.js",
        "./featureFlags.js",
        "./showSnackbar.js",
        "./settings/applyInitialValues.js",
        "./settings/listenerUtils.js",
        "./settings/gameModeSwitches.js",
        "./settings/featureFlagSwitches.js",
        "./settings/makeHandleUpdate.js",
        "./settings/addNavResetButton.js"
      ],
      "functions": {
        "createResetConfirmation": {
          "calls": [
            "createElement",
            "createButton",
            "append",
            "createDocumentFragment",
            "createModal",
            "addEventListener",
            "close",
            "onConfirm",
            "showSnackbar",
            "appendChild"
          ],
          "patterns": ["factory"]
        },
        "initializeControls": {
          "calls": [
            "createControlsRefs",
            "makeErrorPopupHandler",
            "makeHandleUpdate",
            "attachToggleListeners",
            "makeRenderSwitches",
            "createResetConfirmation",
            "resetSettings",
            "initFeatureFlags",
            "withViewTransition",
            "applyDisplayMode",
            "applyMotionPreference",
            "toggleViewportSimulation",
            "isEnabled",
            "toggleTooltipOverlayDebug",
            "toggleLayoutDebugPanel",
            "renderSwitches",
            "expandAllSections",
            "showSnackbar",
            "addEventListener",
            "open",
            "isArray"
          ],
          "patterns": []
        },
        "getCurrentSettings": {
          "calls": [],
          "patterns": []
        },
        "createControlsRefs": {
          "calls": ["getElementById", "querySelectorAll"],
          "patterns": ["factory"]
        },
        "makeErrorPopupHandler": {
          "calls": ["revert", "clearTimeout", "setTimeout"],
          "patterns": []
        },
        "clearToggles": {
          "calls": ["forEach", "querySelectorAll", "remove"],
          "patterns": []
        },
        "makeRenderSwitches": {
          "calls": [
            "cleanupTooltips",
            "getCurrentSettings",
            "querySelector",
            "withViewTransition",
            "applyDisplayMode",
            "catch",
            "handleUpdate",
            "applyInitialControlValues",
            "getElementById",
            "isArray",
            "clearToggles",
            "renderGameModeSwitches",
            "renderFeatureFlagSwitches",
            "queueMicrotask",
            "addEventListener",
            "setTimeout",
            "then",
            "initTooltips"
          ],
          "patterns": []
        },
        "expandAllSections": {
          "calls": ["forEach", "querySelectorAll", "removeAttribute", "setAttribute"],
          "patterns": []
        },
        "fetchSettingsData": {
          "calls": ["all", "initFeatureFlags", "loadNavigationItems", "getTooltips"],
          "patterns": []
        },
        "renderSettingsControls": {
          "calls": [
            "expandAllSections",
            "applyInitialSettings",
            "initializeControls",
            "renderSwitches",
            "dispatchEvent"
          ],
          "patterns": []
        },
        "showSectionError": {
          "calls": ["getElementById", "createElement", "setAttribute", "append"],
          "patterns": []
        },
        "renderWithFallbacks": {
          "calls": ["isArray", "showSectionError", "renderSettingsControls"],
          "patterns": []
        },
        "initializeSettingsPage": {
          "calls": ["fetchSettingsData", "error", "showLoadSettingsError", "renderWithFallbacks"],
          "patterns": []
        },
        "applyInitialSettings": {
          "calls": [
            "applyDisplayMode",
            "applyMotionPreference",
            "toggleViewportSimulation",
            "isEnabled",
            "toggleTooltipOverlayDebug",
            "toggleLayoutDebugPanel"
          ],
          "patterns": []
        },
        "showLoadSettingsError": {
          "calls": ["getElementById", "showSettingsError"],
          "patterns": []
        }
      }
    },
    "src/helpers/settingsCache.js": {
      "imports": ["../config/settingsDefaults.js", "../config/loadSettings.js"],
      "functions": {
        "cloneSettings": {
          "calls": ["fromEntries", "map", "entries"],
          "patterns": []
        },
        "loadDefaultSettings": {
          "calls": ["loadSettings", "setCachedSettings"],
          "patterns": []
        },
        "setCachedSettings": {
          "calls": ["cloneSettings"],
          "patterns": []
        },
        "resetCache": {
          "calls": ["cloneSettings"],
          "patterns": []
        },
        "getSetting": {
          "calls": [],
          "patterns": []
        },
        "getFeatureFlag": {
          "calls": [],
          "patterns": []
        },
        "getCachedSettings": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/scheduler.js": {
      "imports": [],
      "functions": {}
    },
    "src/helpers/sanitizeHtml.js": {
      "imports": [],
      "functions": {
        "getSanitizer": {
          "calls": ["maybe", "tryLoad", "String", "replace", "toLowerCase", "has", "startsWith"],
          "patterns": []
        },
        "tryLoad": {
          "calls": ["maybe"],
          "patterns": []
        },
        "sanitizeBasic": {
          "calls": ["String", "replace", "toLowerCase", "has", "startsWith"],
          "patterns": []
        }
      }
    },
    "src/helpers/randomJudokaPage.js": {
      "imports": [
        "./randomCard.js",
        "./cardUtils.js",
        "../components/Button.js",
        "./motionUtils.js",
        "./domReady.js",
        "./tooltip.js",
        "./viewportDebug.js",
        "./tooltipOverlayDebug.js",
        "./testModeUtils.js",
        "./featureFlags.js",
        "./randomCardService.js"
      ],
      "functions": {
        "initFeatureFlagState": {
          "calls": [
            "initFeatureFlags",
            "error",
            "matchMedia",
            "setTestMode",
            "isEnabled",
            "applyMotionPreference",
            "toggleViewportSimulation",
            "toggleInspectorPanels",
            "toggleTooltipOverlayDebug"
          ],
          "patterns": []
        },
        "buildHistoryPanel": {
          "calls": [
            "querySelector",
            "createButton",
            "setAttribute",
            "appendChild",
            "createElement",
            "getHistoryPanelTransition",
            "append"
          ],
          "patterns": []
        },
        "createDrawButton": {
          "calls": ["createButton", "setAttribute"],
          "patterns": ["factory"]
        },
        "showError": {
          "calls": [
            "getElementById",
            "createElement",
            "setAttribute",
            "querySelector",
            "warn",
            "appendChild"
          ],
          "patterns": []
        },
        "updateHistoryUI": {
          "calls": ["forEach", "get", "createElement", "appendChild"],
          "patterns": []
        },
        "addToHistory": {
          "calls": ["add", "updateHistoryUI"],
          "patterns": []
        },
        "toggleHistory": {
          "calls": ["getAttribute", "setAttribute", "String"],
          "patterns": []
        },
        "getHistoryPanelTransition": {
          "calls": [],
          "patterns": []
        },
        "displayCard": {
          "calls": [
            "resolve",
            "showError",
            "setAttribute",
            "settle",
            "querySelector",
            "add",
            "getElementById",
            "removeAttribute",
            "remove",
            "enableButton",
            "generateRandomCard",
            "isEnabled",
            "error",
            "requestAnimationFrame",
            "removeEventListener",
            "clear",
            "addEventListener",
            "set"
          ],
          "patterns": []
        },
        "settle": {
          "calls": ["resolve"],
          "patterns": []
        },
        "enableButton": {
          "calls": ["removeAttribute", "remove", "settle"],
          "patterns": []
        },
        "onEnd": {
          "calls": ["removeEventListener", "clear", "enableButton"],
          "patterns": []
        },
        "setupRandomJudokaPage": {
          "calls": [
            "initFeatureFlagState",
            "getElementById",
            "appendChild",
            "cloneNode",
            "preloadRandomCardData",
            "createHistoryManager",
            "buildHistoryPanel",
            "querySelector",
            "createDrawButton",
            "addToHistory",
            "addEventListener",
            "displayCard",
            "toggleHistory",
            "toggleInspectorPanels",
            "isEnabled",
            "toggleViewportSimulation",
            "toggleTooltipOverlayDebug",
            "showError",
            "setAttribute",
            "initTooltips"
          ],
          "patterns": []
        },
        "onSelect": {
          "calls": ["addToHistory"],
          "patterns": []
        },
        "initRandomJudokaPage": {
          "calls": ["all", "setupRandomJudokaPage"],
          "patterns": []
        }
      }
    },
    "src/helpers/randomCardService.js": {
      "imports": ["./dataUtils.js", "./constants.js"],
      "functions": {
        "preloadRandomCardData": {
          "calls": ["all", "fetchJson", "error"],
          "patterns": []
        },
        "createHistoryManager": {
          "calls": ["unshift", "pop"],
          "patterns": ["factory"]
        }
      }
    },
    "src/helpers/randomCard.js": {
      "imports": [
        "./dataUtils.js",
        "./utils.js",
        "./cardUtils.js",
        "./judokaValidation.js",
        "./constants.js",
        "./judokaUtils.js",
        "../components/JudokaCard.js",
        "./lazyPortrait.js",
        "./signatureMove.js"
      ],
      "functions": {
        "displayCard": {
          "calls": [
            "appendChild",
            "querySelector",
            "markSignatureMoveReady",
            "setupLazyPortraits",
            "requestAnimationFrame",
            "add"
          ],
          "patterns": []
        },
        "createCardForJudoka": {
          "calls": ["render", "displayCard"],
          "patterns": ["factory"]
        },
        "generateRandomCard": {
          "calls": [
            "fetchJson",
            "createGokyoLookup",
            "error",
            "showSnackbar",
            "warn",
            "isArray",
            "filter",
            "hasRequiredJudokaFields",
            "getRandomJudoka",
            "onSelect",
            "render",
            "displayCard",
            "getFallbackJudoka",
            "createCardForJudoka"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/quoteBuilder.js": {
      "imports": ["./quotes/quoteService.js", "./quotes/quoteRenderer.js"],
      "functions": {
        "waitForKgImage": {
          "calls": ["querySelector", "checkAssetsReady", "addEventListener", "resolve"],
          "patterns": []
        },
        "loadQuote": {
          "calls": ["displayRandomQuote", "displayFable", "all", "waitForKgImage"],
          "patterns": []
        }
      }
    },
    "src/helpers/preload.js": {
      "imports": ["./constants.js", "./dataUtils.js"],
      "functions": {
        "preloadMeditationAssets": {
          "calls": ["all", "fetch", "fetchJson", "error"],
          "patterns": []
        }
      }
    },
    "src/helpers/prdTaskStats.js": {
      "imports": [],
      "functions": {
        "getPrdTaskStats": {
          "calls": ["match", "split", "toLowerCase"],
          "patterns": []
        }
      }
    },
    "src/helpers/prdReaderPage.js": {
      "imports": [
        "./domReady.js",
        "./markdownToHtml.js",
        "./tooltip.js",
        "../components/SidebarList.js",
        "./prdTaskStats.js",
        "./sanitizeHtml.js",
        "../components/Spinner.js"
      ],
      "functions": {
        "cleanupTooltips": {
          "calls": [],
          "patterns": []
        },
        "loadPrdFileList": {
          "calls": [
            "replace",
            "keys",
            "map",
            "glob",
            "pop",
            "split",
            "fetch",
            "json",
            "sort",
            "localeCompare",
            "trim"
          ],
          "patterns": []
        },
        "createSidebarList": {
          "calls": ["replaceWith", "bind"],
          "patterns": ["factory"]
        },
        "bindNavigation": {
          "calls": ["forEach", "addEventListener", "selectDoc", "showNext", "showPrev", "abs"],
          "patterns": []
        },
        "fetchAndRenderDoc": {
          "calls": [
            "getSanitizer",
            "replace",
            "sanitize",
            "parserFn",
            "escapeHtml",
            "Array",
            "parseWithWarning",
            "getPrdTaskStats",
            "match",
            "trim",
            "fetch",
            "text",
            "error"
          ],
          "patterns": []
        },
        "escapeHtml": {
          "calls": ["replace"],
          "patterns": []
        },
        "parseWithWarning": {
          "calls": ["sanitize", "parserFn", "escapeHtml"],
          "patterns": []
        },
        "renderDocument": {
          "calls": [
            "cleanupTooltips",
            "sanitize",
            "remove",
            "add",
            "round",
            "then",
            "initTooltips"
          ],
          "patterns": []
        },
        "initSidebar": {
          "calls": [
            "getSanitizer",
            "loadPrdFileList",
            "get",
            "max",
            "indexOf",
            "replace",
            "getElementById",
            "createSpinner",
            "Array",
            "sanitize",
            "parserFn",
            "escapeHtml",
            "fetch",
            "text",
            "parseWithWarning",
            "getPrdTaskStats",
            "match",
            "trim",
            "error",
            "listSelect",
            "ensureDocSync",
            "renderDocument",
            "focus",
            "then",
            "fetchOne",
            "set",
            "pushState",
            "createSidebarList",
            "selectDocSync"
          ],
          "patterns": []
        },
        "fetchOne": {
          "calls": [
            "fetch",
            "text",
            "parseWithWarning",
            "getPrdTaskStats",
            "match",
            "trim",
            "error"
          ],
          "patterns": []
        },
        "ensureDocSync": {
          "calls": ["parseWithWarning", "getPrdTaskStats", "match", "trim"],
          "patterns": []
        },
        "selectDocSync": {
          "calls": [
            "listSelect",
            "ensureDocSync",
            "renderDocument",
            "focus",
            "then",
            "fetchOne",
            "set",
            "pushState"
          ],
          "patterns": []
        },
        "initNavigationHandlers": {
          "calls": ["querySelectorAll", "selectDocSync", "bindNavigation"],
          "patterns": []
        },
        "showNext": {
          "calls": ["selectDocSync"],
          "patterns": []
        },
        "showPrev": {
          "calls": ["selectDocSync"],
          "patterns": []
        },
        "setupPrdReaderPage": {
          "calls": [
            "initSidebar",
            "initNavigationHandlers",
            "set",
            "replaceState",
            "toString",
            "show",
            "ensureDocSync",
            "fetchOne",
            "renderDocument",
            "focus",
            "remove",
            "then",
            "resolve"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/navigationCache.js": {
      "imports": ["./dataUtils.js", "./constants.js", "./storage.js"],
      "functions": {
        "getNavigationSchema": {
          "calls": ["catch", "then", "fetch", "json", "importJsonModule"],
          "patterns": []
        },
        "load": {
          "calls": [
            "getNavigationSchema",
            "getItem",
            "validateWithSchema",
            "warn",
            "removeItem",
            "fetchJson",
            "importJsonModule",
            "setItem"
          ],
          "patterns": []
        },
        "save": {
          "calls": ["validateWithSchema", "getNavigationSchema", "setItem"],
          "patterns": []
        },
        "reset": {
          "calls": ["removeItem"],
          "patterns": []
        }
      }
    },
    "src/helpers/navigationBar.js": {
      "imports": ["./gameModeUtils.js"],
      "functions": {
        "highlightActiveLink": {
          "calls": ["querySelectorAll", "forEach", "getAttribute", "toggle"],
          "patterns": []
        },
        "addTouchFeedback": {
          "calls": [
            "querySelectorAll",
            "forEach",
            "addEventListener",
            "createElement",
            "appendChild",
            "setTimeout",
            "remove"
          ],
          "patterns": []
        },
        "populateNavbar": {
          "calls": [
            "setAttribute",
            "dispatchEvent",
            "navReadyResolve",
            "querySelectorAll",
            "loadNavigationItems",
            "filter",
            "forEach",
            "Number",
            "replace",
            "getAttribute",
            "find",
            "String",
            "toggle",
            "add",
            "addTouchFeedback",
            "highlightActiveLink",
            "error",
            "signalReady"
          ],
          "patterns": []
        },
        "signalReady": {
          "calls": ["setAttribute", "dispatchEvent", "navReadyResolve"],
          "patterns": []
        }
      }
    },
    "src/helpers/navUtils.js": {
      "imports": [],
      "functions": {
        "resolveHomeHref": {
          "calls": ["match", "endsWith"],
          "patterns": []
        },
        "navigateToHome": {
          "calls": ["resolveHomeHref", "replaceState"],
          "patterns": []
        }
      }
    },
    "src/helpers/motionUtils.js": {
      "imports": ["./settingsCache.js"],
      "functions": {
        "shouldReduceMotionSync": {
          "calls": ["getSetting", "matchMedia"],
          "patterns": []
        },
        "applyMotionPreference": {
          "calls": ["add", "remove"],
          "patterns": []
        }
      }
    },
    "src/helpers/mockupViewerPage.js": {
      "imports": [
        "./buttonEffects.js",
        "./domReady.js",
        "./tooltip.js",
        "../components/SidebarList.js"
      ],
      "functions": {
        "setupMockupViewerPage": {
          "calls": [
            "getElementById",
            "showImage",
            "bind",
            "replaceWith",
            "add",
            "listSelect",
            "removeEventListener",
            "addEventListener",
            "setupButtonEffects",
            "initTooltips",
            "cleanupTooltips"
          ],
          "patterns": []
        },
        "showImage": {
          "calls": ["add", "listSelect"],
          "patterns": []
        },
        "handlePrevClick": {
          "calls": ["showImage"],
          "patterns": []
        },
        "handleNextClick": {
          "calls": ["showImage"],
          "patterns": []
        },
        "handleKeydown": {
          "calls": ["showImage"],
          "patterns": []
        }
      }
    },
    "src/helpers/meditationPage.js": {
      "imports": ["./pseudoJapanese/ui.js", "./domReady.js", "./tooltip.js", "./quoteBuilder.js"],
      "functions": {
        "setupMeditationPage": {
          "calls": ["getElementById", "loadQuote", "setupLanguageToggle", "initTooltips"],
          "patterns": []
        }
      }
    },
    "src/helpers/markdownToHtml.js": {
      "imports": ["../vendor/marked.esm.js"],
      "functions": {
        "markdownToHtml": {
          "calls": ["parse"],
          "patterns": []
        }
      }
    },
    "src/helpers/lazyPortrait.js": {
      "imports": [],
      "functions": {
        "setupLazyPortraits": {
          "calls": [
            "querySelectorAll",
            "getAttribute",
            "removeAttribute",
            "unobserve",
            "forEach",
            "observe"
          ],
          "patterns": []
        },
        "onIntersect": {
          "calls": ["getAttribute", "removeAttribute", "unobserve"],
          "patterns": []
        }
      }
    },
    "src/helpers/layoutDebugPanel.js": {
      "imports": [],
      "functions": {
        "toggleLayoutDebugPanel": {
          "calls": ["Boolean", "forEach", "querySelectorAll", "remove", "add"],
          "patterns": []
        }
      }
    },
    "src/helpers/judokaValidation.js": {
      "imports": [],
      "functions": {
        "getMissingJudokaFields": {
          "calls": ["concat", "map", "push"],
          "patterns": []
        },
        "hasRequiredJudokaFields": {
          "calls": ["getMissingJudokaFields"],
          "patterns": []
        }
      }
    },
    "src/helpers/judokaUtils.js": {
      "imports": ["./dataUtils.js", "./constants.js"],
      "functions": {
        "getFallbackJudoka": {
          "calls": ["fetchJson", "isArray", "find", "error"],
          "patterns": []
        }
      }
    },
    "src/helpers/homePage.js": {
      "imports": [],
      "functions": {}
    },
    "src/helpers/gameModeUtils.js": {
      "imports": [
        "./dataUtils.js",
        "./constants.js",
        "./navigationCache.js",
        "./storage.js",
        "../data/navigationItems.json"
      ],
      "functions": {
        "getSchema": {
          "calls": ["catch", "then", "fetch", "json", "importJsonModule"],
          "patterns": []
        },
        "loadGameModes": {
          "calls": [
            "getSchema",
            "getItem",
            "validateWithSchema",
            "warn",
            "removeItem",
            "fetchJson",
            "importJsonModule",
            "setItem"
          ],
          "patterns": []
        },
        "loadNavigationItems": {
          "calls": [
            "loadNavCache",
            "error",
            "importJsonModule",
            "loadGameModes",
            "isArray",
            "map",
            "find",
            "Number"
          ],
          "patterns": []
        },
        "saveGameModes": {
          "calls": ["validateWithSchema", "getSchema", "setItem"],
          "patterns": []
        },
        "updateNavigationItemHidden": {
          "calls": [
            "loadNavCache",
            "Number",
            "findIndex",
            "saveNavCache",
            "loadGameModes",
            "map",
            "find"
          ],
          "patterns": []
        },
        "getGameModeById": {
          "calls": ["Number", "loadNavigationItems", "find"],
          "patterns": []
        },
        "validateGameModeUrl": {
          "calls": ["error", "loadNavigationItems", "some"],
          "patterns": []
        }
      }
    },
    "src/helpers/featureFlags.js": {
      "imports": [
        "../config/loadSettings.js",
        "./settingsStorage.js",
        "./settingsCache.js",
        "../config/settingsDefaults.js"
      ],
      "functions": {
        "initFeatureFlags": {
          "calls": ["loadSettings", "setCachedSettings", "dispatchEvent"],
          "patterns": []
        },
        "isEnabled": {
          "calls": [],
          "patterns": []
        },
        "setFlag": {
          "calls": ["loadSettings", "hasOwn", "warn", "updateSetting", "dispatchEvent"],
          "patterns": []
        }
      }
    },
    "src/helpers/errorUtils.js": {
      "imports": [],
      "functions": {
        "safeGenerate": {
          "calls": ["fn", "error", "fallback"],
          "patterns": []
        }
      }
    },
    "src/helpers/env.js": {
      "imports": [],
      "functions": {
        "isNodeEnvironment": {
          "calls": ["Boolean"],
          "patterns": []
        },
        "isBrowserEnvironment": {
          "calls": [],
          "patterns": []
        },
        "getBaseUrl": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/domReady.js": {
      "imports": [],
      "functions": {
        "onDomReady": {
          "calls": ["fn", "addEventListener"],
          "patterns": []
        }
      }
    },
    "src/helpers/displayMode.js": {
      "imports": [],
      "functions": {
        "applyDisplayMode": {
          "calls": ["includes", "warn", "join", "remove", "add"],
          "patterns": []
        }
      }
    },
    "src/helpers/debug.js": {
      "imports": [],
      "functions": {
        "debugLog": {
          "calls": ["log"],
          "patterns": []
        }
      }
    },
    "src/helpers/dataUtils.js": {
      "imports": ["./judokaValidation.js", "./debug.js", "./env.js"],
      "functions": {
        "validate": {
          "calls": [],
          "patterns": []
        },
        "getAjv": {
          "calls": ["isNodeEnvironment", "load", "isBrowserEnvironment"],
          "patterns": []
        },
        "resolveUrl": {
          "calls": [
            "toString",
            "isNodeEnvironment",
            "test",
            "startsWith",
            "pathToFileURL",
            "cwd",
            "getBaseUrl"
          ],
          "patterns": []
        },
        "readData": {
          "calls": ["fileURLToPath", "parse", "readFile", "fetch", "json"],
          "patterns": []
        },
        "validateAndCache": {
          "calls": ["validateWithSchema", "set", "String"],
          "patterns": []
        },
        "fetchJson": {
          "calls": [
            "debugLog",
            "String",
            "has",
            "get",
            "resolveUrl",
            "getBaseUrl",
            "readData",
            "validateAndCache",
            "delete"
          ],
          "patterns": []
        },
        "validateData": {
          "calls": ["getMissingJudokaFields", "join"],
          "patterns": []
        },
        "validateWithSchema": {
          "calls": ["getAjv", "get", "compile", "set", "validate", "errorsText"],
          "patterns": []
        },
        "importJsonModule": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/cssVariableParser.js": {
      "imports": ["postcss"],
      "functions": {
        "parseCssVariables": {
          "calls": ["parse", "walkRules", "walkDecls", "startsWith", "trim", "debug"],
          "patterns": []
        }
      }
    },
    "src/helpers/countryUtils.js": {
      "imports": [],
      "functions": {}
    },
    "src/helpers/countrySlider.js": {
      "imports": ["./country/list.js"],
      "functions": {
        "createCountrySlider": {
          "calls": ["populateCountryList"],
          "patterns": ["factory"]
        }
      }
    },
    "src/helpers/countryPanel.js": {
      "imports": [],
      "functions": {
        "toggleCountryPanel": {
          "calls": [
            "contains",
            "removeAttribute",
            "add",
            "setAttribute",
            "querySelector",
            "focus",
            "remove"
          ],
          "patterns": []
        },
        "toggleCountryPanelMode": {
          "calls": ["contains", "add", "remove"],
          "patterns": []
        }
      }
    },
    "src/helpers/constants.js": {
      "imports": [],
      "functions": {}
    },
    "src/helpers/classicBattlePage.js": {
      "imports": [],
      "functions": {}
    },
    "src/helpers/classicBattle.js": {
      "imports": [],
      "functions": {}
    },
    "src/helpers/changeLogPage.js": {
      "imports": [
        "./dataUtils.js",
        "./constants.js",
        "./utils.js",
        "./domReady.js",
        "./tooltip.js",
        "../components/Spinner.js"
      ],
      "functions": {
        "sortJudoka": {
          "calls": ["sort", "getTime", "toLowerCase", "localeCompare"],
          "patterns": []
        },
        "createRow": {
          "calls": ["createElement", "String", "appendChild", "escapeHTML", "formatDate"],
          "patterns": ["factory"]
        },
        "setupChangeLogPage": {
          "calls": [
            "getElementById",
            "querySelector",
            "createSpinner",
            "show",
            "fetchJson",
            "isArray",
            "map",
            "slice",
            "sortJudoka",
            "forEach",
            "appendChild",
            "insertAdjacentHTML",
            "error",
            "remove",
            "initTooltips"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/carouselScroll.js": {
      "imports": [],
      "functions": {}
    },
    "src/helpers/carouselBuilder.js": {
      "imports": [
        "./utils.js",
        "./carousel/index.js",
        "./carousel/controller.js",
        "./carousel/accessibility.js",
        "./carousel/focus.js",
        "./lazyPortrait.js",
        "./constants.js",
        "../components/Spinner.js"
      ],
      "functions": {
        "addScrollMarkers": {
          "calls": [
            "querySelector",
            "createElement",
            "querySelectorAll",
            "parseFloat",
            "getComputedStyle",
            "max",
            "floor",
            "ceil",
            "add",
            "appendChild",
            "setAttribute",
            "addEventListener",
            "min",
            "round",
            "forEach",
            "toggle"
          ],
          "patterns": []
        },
        "initScrollMarkers": {
          "calls": ["requestAnimationFrame", "addScrollMarkers"],
          "patterns": []
        },
        "validateJudokaList": {
          "calls": ["isArray", "error"],
          "patterns": []
        },
        "validateGokyoData": {
          "calls": ["isArray", "warn", "createGokyoLookup"],
          "patterns": []
        },
        "buildCardCarousel": {
          "calls": [
            "createCarouselStructure",
            "validateJudokaList",
            "createElement",
            "appendChild",
            "validateGokyoData",
            "createSpinner",
            "show",
            "appendCards",
            "setupResponsiveSizing",
            "remove",
            "setupFocusHandlers",
            "applyAccessibilityImprovements",
            "setupLazyPortraits"
          ],
          "patterns": []
        },
        "showSpinnerImmediately": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/cardUtils.js": {
      "imports": [
        "./inspector/createInspectorPanel.js",
        "./debug.js",
        "./testModeUtils.js",
        "./judokaValidation.js",
        "./lazyPortrait.js",
        "../components/JudokaCard.js"
      ],
      "functions": {
        "escapeHtml": {
          "calls": ["replace", "String"],
          "patterns": []
        },
        "getRandomJudoka": {
          "calls": [
            "isArray",
            "filter",
            "hasRequiredJudokaFields",
            "floor",
            "seededRandom",
            "debugLog"
          ],
          "patterns": []
        },
        "displayJudokaCard": {
          "calls": [
            "debugLog",
            "error",
            "hasRequiredJudokaFields",
            "escapeHtml",
            "join",
            "getMissingJudokaFields",
            "render",
            "appendChild",
            "setupLazyPortraits"
          ],
          "patterns": []
        },
        "toggleInspectorPanels": {
          "calls": [
            "forEach",
            "querySelectorAll",
            "querySelector",
            "parse",
            "warn",
            "createInspectorPanel",
            "appendChild",
            "remove",
            "removeAttribute"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/cardTopBar.js": {
      "imports": ["../utils/countryCodes.js", "./utils.js", "./debug.js"],
      "functions": {
        "createNoDataContainer": {
          "calls": ["createElement", "debugLog"],
          "patterns": ["factory"]
        },
        "extractJudokaData": {
          "calls": ["getValue"],
          "patterns": []
        },
        "resolveCountryName": {
          "calls": ["getCountryByCode", "debugLog"],
          "patterns": []
        },
        "createNameContainer": {
          "calls": ["createElement", "appendChild"],
          "patterns": ["factory"]
        },
        "createFlagImage": {
          "calls": ["debugLog", "createElement", "setAttribute", "appendChild"],
          "patterns": ["factory"]
        },
        "generateCardTopBar": {
          "calls": [
            "error",
            "createNoDataContainer",
            "extractJudokaData",
            "resolveCountryName",
            "debugLog",
            "createElement",
            "createNameContainer",
            "appendChild",
            "createFlagImage"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/cardSections.js": {
      "imports": ["./cardRender.js", "./cardTopBar.js", "./errorUtils.js"],
      "functions": {
        "createTopBarSection": {
          "calls": ["safeGenerate", "generateCardTopBar", "createNoDataContainer"],
          "patterns": ["factory"]
        },
        "createPortraitSection": {
          "calls": [
            "createContextualFragment",
            "createRange",
            "generateCardPortrait",
            "createElement",
            "appendChild",
            "error",
            "createNoDataContainer"
          ],
          "patterns": ["factory"]
        },
        "createStatsSection": {
          "calls": [
            "generateCardStats",
            "createContextualFragment",
            "createRange",
            "error",
            "createNoDataContainer"
          ],
          "patterns": ["factory"]
        },
        "createSignatureMoveSection": {
          "calls": [
            "generateCardSignatureMove",
            "createContextualFragment",
            "createRange",
            "error",
            "createNoDataContainer"
          ],
          "patterns": ["factory"]
        }
      }
    },
    "src/helpers/cardRender.js": {
      "imports": ["./utils.js", "../components/StatsPanel.js", "./debug.js"],
      "functions": {
        "generateCardPortrait": {
          "calls": ["filter", "join", "escapeHTML"],
          "patterns": []
        },
        "generateCardStats": {
          "calls": ["createStatsPanel"],
          "patterns": []
        },
        "resolveTechnique": {
          "calls": ["Number", "debugLog"],
          "patterns": []
        },
        "formatTechniqueName": {
          "calls": ["escapeHTML", "trim", "decodeHTML"],
          "patterns": []
        },
        "generateCardSignatureMove": {
          "calls": ["resolveTechnique", "debugLog", "formatTechniqueName", "toLowerCase"],
          "patterns": []
        }
      }
    },
    "src/helpers/cardFlip.js": {
      "imports": [],
      "functions": {
        "enableCardFlip": {
          "calls": ["toggle", "addEventListener", "preventDefault"],
          "patterns": []
        },
        "toggle": {
          "calls": ["toggle"],
          "patterns": []
        }
      }
    },
    "src/helpers/cardCode.js": {
      "imports": ["./judokaValidation.js"],
      "functions": {
        "xorEncode": {
          "calls": ["join", "map", "split", "fromCharCode", "charCodeAt"],
          "patterns": []
        },
        "toReadableCharset": {
          "calls": ["join", "map", "split", "charCodeAt"],
          "patterns": []
        },
        "chunk": {
          "calls": ["join", "match"],
          "patterns": []
        },
        "generateCardCode": {
          "calls": [
            "getMissingJudokaFields",
            "hasRequiredJudokaFields",
            "join",
            "toUpperCase",
            "toString",
            "xorEncode",
            "toReadableCharset",
            "chunk"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/cardBuilder.js": {
      "imports": [
        "./country/codes.js",
        "./errorUtils.js",
        "./judokaValidation.js",
        "./cardFlip.js",
        "./cardSections.js",
        "./inspector/createInspectorPanel.js",
        "./signatureMove.js"
      ],
      "functions": {
        "generateJudokaCardHTML": {
          "calls": [
            "createElement",
            "getMissingJudokaFields",
            "hasRequiredJudokaFields",
            "join",
            "safeGenerate",
            "getFlagUrl",
            "toLowerCase",
            "stringify",
            "setAttribute",
            "add",
            "buildSection",
            "appendChild",
            "enableCardFlip",
            "createInspectorPanel"
          ],
          "patterns": []
        },
        "generateJudokaCard": {
          "calls": [
            "safeGenerate",
            "generateJudokaCardHTML",
            "querySelector",
            "markSignatureMoveReady"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/buttonEffects.js": {
      "imports": ["./motionUtils.js"],
      "functions": {
        "setupButtonEffects": {
          "calls": [
            "querySelectorAll",
            "forEach",
            "addEventListener",
            "shouldReduceMotionSync",
            "querySelector",
            "createElement",
            "appendChild",
            "remove"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/browseJudokaPage.js": {
      "imports": [
        "./carouselBuilder.js",
        "../components/Spinner.js",
        "./countryPanel.js",
        "./dataUtils.js",
        "./constants.js",
        "./judokaUtils.js",
        "../components/Button.js",
        "./tooltip.js",
        "./buttonEffects.js",
        "./browse/setupCountryToggle.js",
        "./browse/setupCountryFilter.js",
        "./setupHoverZoom.js"
      ],
      "functions": {
        "setupLayoutToggle": {
          "calls": ["addEventListener", "toggleCountryPanelMode"],
          "patterns": []
        },
        "setupBrowseJudokaPage": {
          "calls": [
            "getElementById",
            "error",
            "resolveBrowseReady",
            "setAttribute",
            "toggleCountryPanelMode",
            "allSettled",
            "fetchJson",
            "buildCardCarousel",
            "appendChild",
            "querySelector",
            "initScrollMarkers",
            "setupButtonEffects",
            "addHoverZoomMarkers",
            "has",
            "createSpinner",
            "show",
            "loadData",
            "renderCarousel",
            "remove",
            "createElement",
            "setupCountryToggle",
            "setupLayoutToggle",
            "setupCountryFilter",
            "getFallbackJudoka",
            "createButton",
            "addEventListener",
            "init",
            "initTooltips"
          ],
          "patterns": []
        },
        "loadData": {
          "calls": ["allSettled", "fetchJson"],
          "patterns": []
        },
        "renderCarousel": {
          "calls": [
            "buildCardCarousel",
            "appendChild",
            "querySelector",
            "initScrollMarkers",
            "setupButtonEffects",
            "addHoverZoomMarkers"
          ],
          "patterns": []
        },
        "init": {
          "calls": [
            "has",
            "createSpinner",
            "show",
            "loadData",
            "renderCarousel",
            "resolveBrowseReady",
            "remove",
            "createElement",
            "setAttribute",
            "appendChild",
            "getElementById",
            "setupCountryToggle",
            "setupLayoutToggle",
            "querySelector",
            "setupCountryFilter",
            "error",
            "getFallbackJudoka",
            "createButton",
            "addEventListener"
          ],
          "patterns": []
        },
        "render": {
          "calls": ["renderCarousel"],
          "patterns": []
        }
      }
    },
    "src/helpers/battleStateProgress.js": {
      "imports": [
        "./classicBattle/stateTable.js",
        "./classicBattle/uiHelpers.js",
        "./battleInit.js"
      ],
      "functions": {
        "initBattleStateProgress": {
          "calls": [
            "getElementById",
            "resolveBattleStateProgressReady",
            "isArray",
            "sort",
            "filter",
            "from",
            "querySelectorAll",
            "some",
            "Number",
            "trim",
            "createDocumentFragment",
            "forEach",
            "createElement",
            "String",
            "appendChild",
            "toggle",
            "updateBattleStateBadge",
            "updateActive",
            "markBattlePartReady",
            "addEventListener",
            "removeEventListener"
          ],
          "patterns": []
        },
        "updateActive": {
          "calls": ["forEach", "querySelectorAll", "toggle", "updateBattleStateBadge"],
          "patterns": []
        },
        "handler": {
          "calls": ["updateActive", "markBattlePartReady"],
          "patterns": []
        }
      }
    },
    "src/helpers/battleJudokaPage.js": {
      "imports": [],
      "functions": {
        "waitForOpponentCard": {
          "calls": [
            "getElementById",
            "resolve",
            "querySelector",
            "disconnect",
            "clearTimeout",
            "observe",
            "setTimeout"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/battleInit.js": {
      "imports": [],
      "functions": {
        "markBattlePartReady": {
          "calls": ["add", "has", "querySelector", "dispatchEvent"],
          "patterns": []
        }
      }
    },
    "src/helpers/battleEngineFacade.js": {
      "imports": ["./BattleEngine.js"],
      "functions": {
        "setPointsToWin": {
          "calls": ["setPointsToWin"],
          "patterns": []
        },
        "getPointsToWin": {
          "calls": ["getPointsToWin"],
          "patterns": []
        },
        "stopTimer": {
          "calls": ["stopTimer"],
          "patterns": []
        },
        "startRound": {
          "calls": ["startRound"],
          "patterns": []
        },
        "startCoolDown": {
          "calls": ["startCoolDown"],
          "patterns": []
        },
        "pauseTimer": {
          "calls": ["pauseTimer"],
          "patterns": []
        },
        "resumeTimer": {
          "calls": ["resumeTimer"],
          "patterns": []
        },
        "handleStatSelection": {
          "calls": ["handleStatSelection"],
          "patterns": []
        },
        "quitMatch": {
          "calls": ["quitMatch"],
          "patterns": []
        },
        "getScores": {
          "calls": ["getScores"],
          "patterns": []
        },
        "getRoundsPlayed": {
          "calls": ["getRoundsPlayed"],
          "patterns": []
        },
        "isMatchEnded": {
          "calls": ["isMatchEnded"],
          "patterns": []
        },
        "getTimerState": {
          "calls": ["getTimerState"],
          "patterns": []
        },
        "_resetForTest": {
          "calls": ["_resetForTest"],
          "patterns": []
        }
      }
    },
    "src/helpers/TimerController.js": {
      "imports": ["./timerUtils.js", "../utils/scheduler.js"],
      "functions": {}
    },
    "src/helpers/BattleEngine.js": {
      "imports": ["./constants.js", "./TimerController.js", "../utils/scheduler.js"],
      "functions": {
        "compareStats": {
          "calls": [],
          "patterns": []
        },
        "determineOutcome": {
          "calls": [],
          "patterns": []
        },
        "applyOutcome": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/config/settingsDefaults.js": {
      "imports": ["../data/settings.json"],
      "functions": {
        "deepFreeze": {
          "calls": ["forEach", "values", "deepFreeze", "freeze"],
          "patterns": []
        }
      }
    },
    "src/config/loadSettings.js": {
      "imports": ["./settingsDefaults.js"],
      "functions": {
        "mergeObject": {
          "calls": ["isArray", "entries", "mergeObject"],
          "patterns": []
        },
        "mergeKnown": {
          "calls": ["isArray", "entries", "warn", "join", "mergeObject"],
          "patterns": []
        },
        "loadSettings": {
          "calls": ["structuredClone", "fetch", "json", "mergeKnown", "getItem", "parse"],
          "patterns": []
        }
      }
    },
    "src/components/ToggleSwitch.js": {
      "imports": [],
      "functions": {}
    },
    "src/components/StatsPanel.js": {
      "imports": ["../helpers/utils.js", "../helpers/stats.js", "../helpers/battleEngineFacade.js"],
      "functions": {
        "createStatsPanel": {
          "calls": ["update"],
          "patterns": ["factory"]
        }
      }
    },
    "src/components/Spinner.js": {
      "imports": ["../helpers/constants.js"],
      "functions": {
        "createSpinner": {
          "calls": [
            "createElement",
            "setAttribute",
            "appendChild",
            "clearTimeout",
            "setTimeout",
            "remove"
          ],
          "patterns": ["factory"]
        },
        "show": {
          "calls": ["clearTimeout", "setTimeout"],
          "patterns": []
        },
        "hide": {
          "calls": ["clearTimeout"],
          "patterns": []
        },
        "remove": {
          "calls": ["clearTimeout", "remove"],
          "patterns": []
        }
      }
    },
    "src/components/SidebarList.js": {
      "imports": [],
      "functions": {}
    },
    "src/components/Scoreboard.js": {
      "imports": ["../helpers/motionUtils.js", "../helpers/showSnackbar.js"],
      "functions": {
        "createScoreboard": {
          "calls": ["createElement", "setAttribute", "append"],
          "patterns": ["factory"]
        },
        "initScoreboard": {
          "calls": ["querySelector"],
          "patterns": []
        },
        "ensureRefs": {
          "calls": ["getElementById"],
          "patterns": []
        },
        "setScoreText": {
          "calls": ["createElement", "append"],
          "patterns": []
        },
        "animateScore": {
          "calls": [
            "cancelAnimationFrame",
            "shouldReduceMotionSync",
            "now",
            "min",
            "round",
            "setScoreText",
            "requestAnimationFrame"
          ],
          "patterns": []
        },
        "step": {
          "calls": ["min", "round", "setScoreText", "requestAnimationFrame"],
          "patterns": []
        },
        "showMessage": {
          "calls": ["getElementById"],
          "patterns": []
        },
        "clearMessage": {
          "calls": ["getElementById"],
          "patterns": []
        },
        "showTemporaryMessage": {
          "calls": ["showMessage"],
          "patterns": []
        },
        "showAutoSelect": {
          "calls": ["showMessage"],
          "patterns": []
        },
        "clearTimer": {
          "calls": ["ensureRefs"],
          "patterns": []
        },
        "updateRoundCounter": {
          "calls": ["ensureRefs"],
          "patterns": []
        },
        "clearRoundCounter": {
          "calls": ["ensureRefs"],
          "patterns": []
        },
        "startCountdown": {
          "calls": [
            "clearTimer",
            "onFinish",
            "createCountdownState",
            "createTickRenderer",
            "createExpirationHandler",
            "runCountdown",
            "createDriftHandler"
          ],
          "patterns": []
        },
        "restart": {
          "calls": ["runCountdown"],
          "patterns": []
        },
        "updateScore": {
          "calls": ["ensureRefs", "setScoreText", "animateScore"],
          "patterns": []
        },
        "runCountdown": {
          "calls": ["startCoolDown", "warn"],
          "patterns": []
        },
        "createDriftHandler": {
          "calls": ["onGiveUp", "showMessage", "restartFn"],
          "patterns": ["factory"]
        },
        "createCountdownState": {
          "calls": [],
          "patterns": ["factory"]
        },
        "createTickRenderer": {
          "calls": ["clearTimer", "showSnackbar", "updateSnackbar"],
          "patterns": ["factory"]
        },
        "createExpirationHandler": {
          "calls": ["clearTimer", "onFinish"],
          "patterns": ["factory"]
        }
      }
    },
    "src/components/PreviewToggle.js": {
      "imports": [],
      "functions": {}
    },
    "src/components/PlayerInfo.js": {
      "imports": [],
      "functions": {}
    },
    "src/components/Modal.js": {
      "imports": [],
      "functions": {
        "handle": {
          "calls": ["preventDefault", "focus"],
          "patterns": []
        },
        "createModal": {
          "calls": [],
          "patterns": ["factory"]
        }
      }
    },
    "src/components/JudokaCard.js": {
      "imports": [
        "../helpers/country/codes.js",
        "../helpers/cardTopBar.js",
        "../helpers/errorUtils.js",
        "../helpers/judokaValidation.js",
        "../helpers/cardFlip.js",
        "../helpers/cardSections.js",
        "../helpers/inspector/createInspectorPanel.js",
        "./Card.js"
      ],
      "functions": {}
    },
    "src/components/EpicCard.js": {
      "imports": ["./JudokaCard.js"],
      "functions": {}
    },
    "src/components/Card.js": {
      "imports": ["../helpers/sanitizeHtml.js"],
      "functions": {
        "applyClasses": {
          "calls": ["split", "add"],
          "patterns": []
        },
        "insertContent": {
          "calls": ["sanitize", "then", "fn", "append"],
          "patterns": []
        },
        "createCard": {
          "calls": [],
          "patterns": ["factory"]
        }
      }
    },
    "src/components/Button.js": {
      "imports": [],
      "functions": {
        "createButton": {
          "calls": [
            "createElement",
            "parseFromString",
            "querySelector",
            "setAttribute",
            "appendChild",
            "warn"
          ],
          "patterns": ["factory"]
        }
      }
    },
    "tests/vectorSearch/vectorSearchHelpers.test.js": {
      "imports": [
        "vitest",
        "../../src/helpers/api/vectorSearchPage.js",
        "../../src/helpers/vectorSearchPage/renderUtils.js"
      ],
      "functions": {}
    },
    "tests/utils/testUtils.js": {
      "imports": ["fs", "url", "path"],
      "functions": {
        "createScoreboardHeader": {
          "calls": ["createElement"],
          "patterns": ["factory"]
        },
        "createBattleHeader": {
          "calls": ["createElement"],
          "patterns": ["factory"]
        },
        "createRandomCardDom": {
          "calls": ["createElement"],
          "patterns": ["factory"]
        },
        "createBattleCardContainers": {
          "calls": ["createElement"],
          "patterns": ["factory"]
        },
        "createSettingsDom": {
          "calls": ["createDocumentFragment", "createElement", "append"],
          "patterns": ["factory"]
        },
        "resetDom": {
          "calls": ["clear", "restoreAllMocks", "useRealTimers", "resetModules"],
          "patterns": []
        },
        "getJudokaFixture": {
          "calls": ["structuredClone"],
          "patterns": []
        },
        "getGokyoFixture": {
          "calls": ["structuredClone"],
          "patterns": []
        }
      }
    },
    "tests/utils/deepMerge.test.js": {
      "imports": ["vitest", "../../src/utils/deepMerge.js"],
      "functions": {}
    },
    "tests/utils/debounce.test.js": {
      "imports": ["vitest", "../../src/utils/debounce.js"],
      "functions": {}
    },
    "tests/utils/countryCodes.test.js": {
      "imports": ["vitest", "../../src/utils/countryCodes.js"],
      "functions": {}
    },
    "tests/utils/console.js": {
      "imports": [],
      "functions": {
        "noop": {
          "calls": [],
          "patterns": []
        },
        "withMutedConsole": {
          "calls": ["map", "forEach", "fn", "get"],
          "patterns": []
        },
        "withAllowedConsole": {
          "calls": ["map", "forEach", "fn", "get"],
          "patterns": []
        },
        "muteConsole": {
          "calls": ["forEach"],
          "patterns": []
        },
        "restoreConsole": {
          "calls": ["forEach"],
          "patterns": []
        }
      }
    },
    "tests/styles/battleContrast.test.js": {
      "imports": ["vitest", "wcag-contrast"],
      "functions": {}
    },
    "tests/scripts/collectTestStats.test.js": {
      "imports": [
        "vitest",
        "../../scripts/collectTestStats.mjs",
        "node:fs/promises",
        "node:os",
        "node:path"
      ],
      "functions": {
        "setupTempProject": {
          "calls": ["mkdtemp", "join", "tmpdir", "mkdir", "writeFile"],
          "patterns": []
        }
      }
    },
    "tests/data/tooltipsEntries.test.js": {
      "imports": ["vitest", "fs", "path"],
      "functions": {
        "get": {
          "calls": ["reduce", "split"],
          "patterns": []
        }
      }
    },
    "tests/data/schemaValidation.test.js": {
      "imports": ["vitest", "fs/promises", "../../src/helpers/dataUtils.js", "url", "path"],
      "functions": {}
    },
    "tests/data/aesopsMetaCrossCheck.test.js": {
      "imports": ["vitest", "fs/promises", "url", "path"],
      "functions": {
        "loadJson": {
          "calls": ["join", "parse", "readFile"],
          "patterns": []
        }
      }
    },
    "tests/config/loadSettings.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/viewportDebug.test.js": {
      "imports": ["vitest", "../../src/helpers/viewportDebug.js"],
      "functions": {}
    },
    "tests/helpers/viewTransitionTheme.test.js": {
      "imports": ["vitest", "../utils/testUtils.js"],
      "functions": {
        "controlsFromDom": {
          "calls": ["querySelectorAll"],
          "patterns": []
        },
        "getCurrentSettings": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "tests/helpers/vectorSearchQuery.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/vectorSearchIndex.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/vectorSearch.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/updateCodes.test.js": {
      "imports": ["vitest", "../utils/console.js"],
      "functions": {}
    },
    "tests/helpers/typewriter.test.js": {
      "imports": [
        "vitest",
        "../../src/helpers/typewriter.js",
        "../../src/helpers/settingsStorage.js"
      ],
      "functions": {}
    },
    "tests/helpers/tooltipViewerPage.test.js": {
      "imports": ["vitest"],
      "functions": {
        "init": {
          "calls": ["initTooltipViewerPage", "dispatchEvent"],
          "patterns": []
        }
      }
    },
    "tests/helpers/tooltipOverlayDebug.test.js": {
      "imports": ["vitest", "../../src/helpers/tooltipOverlayDebug.js"],
      "functions": {}
    },
    "tests/helpers/tooltip.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/toggleSwitch.test.js": {
      "imports": ["vitest", "../../src/components/ToggleSwitch.js"],
      "functions": {}
    },
    "tests/helpers/timerUtils.test.js": {
      "imports": ["vitest", "../../src/data/settings.json"],
      "functions": {}
    },
    "tests/helpers/timerService.test.js": {
      "imports": ["vitest", "./mockScheduler.js"],
      "functions": {
        "makeTimer": {
          "calls": ["onTick", "setTimeout", "onExpired"],
          "patterns": []
        }
      }
    },
    "tests/helpers/testModeUtils.test.js": {
      "imports": ["vitest", "../../src/helpers/testModeUtils.js"],
      "functions": {}
    },
    "tests/helpers/swipeNavigation.test.js": {
      "imports": [
        "vitest",
        "../../src/helpers/carousel/navigation.js",
        "../../src/helpers/constants.js"
      ],
      "functions": {
        "swipe": {
          "calls": ["dispatchEvent"],
          "patterns": []
        }
      }
    },
    "tests/helpers/svgFallback.test.js": {
      "imports": ["vitest", "../../src/helpers/svgFallback.js"],
      "functions": {}
    },
    "tests/helpers/stats.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/showSnackbar.test.js": {
      "imports": ["vitest", "../../src/helpers/showSnackbar.js", "../../src/helpers/constants.js"],
      "functions": {}
    },
    "tests/helpers/showSettingsError.test.js": {
      "imports": [
        "vitest",
        "../../src/helpers/showSettingsError.js",
        "../../src/helpers/constants.js"
      ],
      "functions": {}
    },
    "tests/helpers/setupScoreboard.test.js": {
      "imports": ["vitest", "../utils/testUtils.js", "./mockScheduler.js"],
      "functions": {
        "createControls": {
          "calls": ["onTick", "setTimeout", "onExpired", "fn"],
          "patterns": ["factory"]
        }
      }
    },
    "tests/helpers/setupCarouselToggle.test.js": {
      "imports": ["vitest"],
      "functions": {
        "createCarousel": {
          "calls": ["createElement", "appendChild"],
          "patterns": ["factory"]
        }
      }
    },
    "tests/helpers/setupBottomNavbar.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/settingsUtils.test.js": {
      "imports": [
        "vitest",
        "../../src/config/settingsDefaults.js",
        "../../src/helpers/settingsStorage.js"
      ],
      "functions": {}
    },
    "tests/helpers/settingsStorage.test.js": {
      "imports": ["../../src/helpers/settingsStorage.js", "../../src/helpers/settingsCache.js"],
      "functions": {}
    },
    "tests/helpers/settingsPage.test.js": {
      "imports": ["vitest", "../utils/testUtils.js", "../../src/data/settings.json"],
      "functions": {}
    },
    "tests/helpers/settingsFormUtils.test.js": {
      "imports": [
        "vitest",
        "../../src/helpers/settings/gameModeSwitches.js",
        "../../src/helpers/settings/featureFlagSwitches.js",
        "../../src/helpers/navigation/navigationService.js"
      ],
      "functions": {}
    },
    "tests/helpers/settingsCache.test.js": {
      "imports": ["../../src/helpers/settingsCache.js", "../../src/config/settingsDefaults.js"],
      "functions": {}
    },
    "tests/helpers/scrollMarkers.test.js": {
      "imports": ["vitest", "../../src/helpers/carouselBuilder.js"],
      "functions": {}
    },
    "tests/helpers/scrollButtonState.test.js": {
      "imports": ["vitest", "../../src/helpers/carousel/scroll.js"],
      "functions": {}
    },
    "tests/helpers/scoreboard.integration.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/randomJudokaPage.test.js": {
      "imports": [
        "vitest",
        "../utils/testUtils.js",
        "fs",
        "path",
        "../../src/helpers/cssVariableParser.js",
        "wcag-contrast",
        "../utils/console.js"
      ],
      "functions": {}
    },
    "tests/helpers/randomCard.test.js": {
      "imports": ["vitest", "../utils/testUtils.js"],
      "functions": {}
    },
    "tests/helpers/quoteBuilder.test.js": {
      "imports": [
        "vitest",
        "../../src/helpers/quoteBuilder.js",
        "../../src/helpers/quotes/quoteRenderer.js"
      ],
      "functions": {}
    },
    "tests/helpers/pseudoJapanese.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/prdTaskStats.test.js": {
      "imports": ["vitest", "../../src/helpers/prdTaskStats.js"],
      "functions": {}
    },
    "tests/helpers/prdReaderPage.test.js": {
      "imports": ["vitest"],
      "functions": {
        "parser": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "tests/helpers/populateCountryList.test.js": {
      "imports": ["vitest", "../../src/helpers/api/countryService.js"],
      "functions": {}
    },
    "tests/helpers/parseTooltipText.test.js": {
      "imports": ["vitest", "../../src/helpers/tooltip.js", "../../src/vendor/marked.esm.js"],
      "functions": {}
    },
    "tests/helpers/navigationTooltips.test.js": {
      "imports": [
        "vitest",
        "../../src/data/tooltips.json",
        "../../src/data/gameModes.json",
        "../../src/helpers/navigation/navigationService.js"
      ],
      "functions": {}
    },
    "tests/helpers/navigationCache.test.js": {
      "imports": ["../../src/helpers/navigationCache.js", "../../src/helpers/storage.js"],
      "functions": {
        "mockFn": {
          "calls": ["fn"],
          "patterns": []
        }
      }
    },
    "tests/helpers/navMenuResponsive.test.js": {
      "imports": ["vitest", "../../src/helpers/navigation/navigationUI.js"],
      "functions": {}
    },
    "tests/helpers/mountInspectorPanel.js": {
      "imports": ["../../src/helpers/inspector/createInspectorPanel.js"],
      "functions": {
        "mountInspectorPanel": {
          "calls": ["createElement", "createInspectorPanel", "appendChild"],
          "patterns": []
        }
      }
    },
    "tests/helpers/motionUtils.test.js": {
      "imports": [
        "vitest",
        "../../src/helpers/motionUtils.js",
        "../../src/helpers/settingsStorage.js"
      ],
      "functions": {
        "matchMediaMock": {
          "calls": ["mockImplementation", "fn"],
          "patterns": []
        }
      }
    },
    "tests/helpers/modalComponent.test.js": {
      "imports": ["vitest", "../../src/components/Modal.js"],
      "functions": {
        "buildContent": {
          "calls": ["createDocumentFragment", "createElement", "append"],
          "patterns": []
        }
      }
    },
    "tests/helpers/mockupViewerPage.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/mockScheduler.js": {
      "imports": [],
      "functions": {
        "createMockScheduler": {
          "calls": ["Symbol", "push", "sort", "findIndex", "splice", "shift", "cb"],
          "patterns": ["factory"]
        },
        "setTimeoutFn": {
          "calls": ["Symbol", "push", "sort"],
          "patterns": []
        },
        "clearTimeoutFn": {
          "calls": ["findIndex", "splice"],
          "patterns": []
        },
        "tick": {
          "calls": ["sort", "shift", "cb"],
          "patterns": []
        }
      }
    },
    "tests/helpers/meditationContrast.test.js": {
      "imports": [
        "vitest",
        "fs",
        "path",
        "wcag-contrast",
        "../../src/helpers/cssVariableParser.js"
      ],
      "functions": {
        "getBaseVars": {
          "calls": ["readFileSync", "resolve", "parseCssVariables"],
          "patterns": []
        }
      }
    },
    "tests/helpers/markdownToHtml.test.js": {
      "imports": [
        "vitest",
        "../../src/helpers/markdownToHtml.js",
        "../../src/vendor/marked.esm.js"
      ],
      "functions": {}
    },
    "tests/helpers/layoutDebugPanel.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/keyboardNavigation.test.js": {
      "imports": ["vitest", "../../src/helpers/carousel/navigation.js"],
      "functions": {}
    },
    "tests/helpers/judokaValidation.test.js": {
      "imports": ["vitest", "../../src/helpers/judokaValidation.js"],
      "functions": {}
    },
    "tests/helpers/judokaCard.test.js": {
      "imports": ["vitest", "../../src/components/JudokaCard.js", "../../src/helpers/cardUtils.js"],
      "functions": {}
    },
    "tests/helpers/helpers.test.js": {
      "imports": ["vitest", "../../src/helpers/utils.js"],
      "functions": {}
    },
    "tests/helpers/headerLogoLinkCss.test.js": {
      "imports": ["vitest", "fs", "postcss"],
      "functions": {
        "getRule": {
          "calls": ["parse", "walkRules"],
          "patterns": []
        }
      }
    },
    "tests/helpers/handleKeyboardNavigation.test.js": {
      "imports": ["vitest", "../../src/helpers/browse/handleKeyboardNavigation.js"],
      "functions": {}
    },
    "tests/helpers/gameRandom.test.js": {
      "imports": ["vitest"],
      "functions": {
        "setupDom": {
          "calls": ["createElement", "append"],
          "patterns": []
        }
      }
    },
    "tests/helpers/gameModeUtils.test.js": {
      "imports": ["vitest", "../../src/data/settings.json"],
      "functions": {}
    },
    "tests/helpers/focusHandlers.test.js": {
      "imports": ["vitest", "../../src/helpers/carousel/focus.js"],
      "functions": {}
    },
    "tests/helpers/featureFlags.test.js": {
      "imports": ["vitest", "../../src/config/settingsDefaults.js"],
      "functions": {}
    },
    "tests/helpers/errorUtils.test.js": {
      "imports": ["vitest", "../../src/helpers/errorUtils.js"],
      "functions": {
        "fallback": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "tests/helpers/domReady.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/displayMode.test.js": {
      "imports": ["vitest", "../../src/helpers/displayMode.js"],
      "functions": {}
    },
    "tests/helpers/dataUtils.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/cssVariableParser.test.js": {
      "imports": ["vitest", "../../src/helpers/cssVariableParser.js"],
      "functions": {}
    },
    "tests/helpers/createInspectorPanel.test.js": {
      "imports": ["vitest", "./mountInspectorPanel.js"],
      "functions": {}
    },
    "tests/helpers/createCountdownTimer.test.js": {
      "imports": ["vitest", "../../src/helpers/timerUtils.js"],
      "functions": {
        "tick": {
          "calls": ["forEach", "slice", "cb"],
          "patterns": []
        }
      }
    },
    "tests/helpers/countrySlider.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/coreUtils.test.js": {
      "imports": ["vitest", "../../src/helpers/cardRender.js"],
      "functions": {}
    },
    "tests/helpers/colorContrast.test.js": {
      "imports": [
        "vitest",
        "fs",
        "path",
        "wcag-contrast",
        "../../src/helpers/cssVariableParser.js"
      ],
      "functions": {
        "readCss": {
          "calls": ["readFileSync", "resolve"],
          "patterns": []
        },
        "resolveColor": {
          "calls": ["match"],
          "patterns": []
        },
        "readComponentsCss": {
          "calls": ["readCss", "exec", "resolve", "readFileSync"],
          "patterns": []
        },
        "getComponentColors": {
          "calls": ["readComponentsCss", "entries", "match", "resolveColor", "trim"],
          "patterns": []
        }
      }
    },
    "tests/helpers/classicBattlePage.test.js": {
      "imports": ["vitest", "../utils/testUtils.js"],
      "functions": {
        "focusOrder": {
          "calls": ["filter", "from", "querySelectorAll"],
          "patterns": []
        },
        "tab": {
          "calls": ["focusOrder", "indexOf", "focus"],
          "patterns": []
        }
      }
    },
    "tests/helpers/classicBattleFlags.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/classicBattle.test.js": {
      "imports": ["vitest", "../../src/helpers/battle/battleUI.js"],
      "functions": {}
    },
    "tests/helpers/changeLogPage.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/carouselController.test.js": {
      "imports": ["vitest", "../../src/helpers/carousel/controller.js"],
      "functions": {
        "counter": {
          "calls": ["querySelector"],
          "patterns": []
        }
      }
    },
    "tests/helpers/carouselBuilder.test.js": {
      "imports": ["vitest", "../utils/console.js", "../../src/helpers/carouselBuilder.js"],
      "functions": {}
    },
    "tests/helpers/cardUtils.test.js": {
      "imports": [
        "vitest",
        "../../src/helpers/cardUtils.js",
        "../../src/helpers/judokaValidation.js"
      ],
      "functions": {}
    },
    "tests/helpers/cardComponent.test.js": {
      "imports": ["vitest", "../../src/components/Card.js"],
      "functions": {}
    },
    "tests/helpers/cardCode.test.js": {
      "imports": ["vitest", "../../src/helpers/cardCode.js"],
      "functions": {}
    },
    "tests/helpers/cardBuilder.test.js": {
      "imports": ["vitest", "../../src/helpers/cardBuilder.js"],
      "functions": {}
    },
    "tests/helpers/buttonEffects.test.js": {
      "imports": [
        "vitest",
        "../../src/helpers/buttonEffects.js",
        "../../src/helpers/motionUtils.js"
      ],
      "functions": {}
    },
    "tests/helpers/buttonComponent.test.js": {
      "imports": ["vitest", "../../src/components/Button.js"],
      "functions": {}
    },
    "tests/helpers/buildMenu.ssr.test.js": {
      "imports": ["vitest", "../../src/helpers/navigation/navigationUI.js"],
      "functions": {}
    },
    "tests/helpers/browseJudokaPage.test.js": {
      "imports": ["vitest"],
      "functions": {
        "updateLiveRegion": {
          "calls": [],
          "patterns": []
        },
        "createSpinner": {
          "calls": ["createElement", "appendChild", "fn", "remove"],
          "patterns": ["factory"]
        }
      }
    },
    "tests/helpers/bottomNavigation.test.js": {
      "imports": ["vitest"],
      "functions": {
        "setupDom": {
          "calls": ["createElement", "appendChild"],
          "patterns": []
        }
      }
    },
    "tests/helpers/bottomNavbarCss.test.js": {
      "imports": ["vitest", "fs", "postcss"],
      "functions": {
        "getRule": {
          "calls": ["parse", "walkRules"],
          "patterns": []
        }
      }
    },
    "tests/helpers/battleTestUtils.js": {
      "imports": [],
      "functions": {
        "_resetForTest": {
          "calls": ["_resetForTest"],
          "patterns": []
        },
        "setTieRound": {
          "calls": ["getElementById"],
          "patterns": []
        }
      }
    },
    "tests/helpers/battleJudokaPage.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/battleHeaderEllipsis.test.js": {
      "imports": ["vitest", "fs", "postcss"],
      "functions": {
        "hasEllipsisRule": {
          "calls": [
            "parse",
            "walkAtRules",
            "test",
            "walkRules",
            "forEach",
            "includes",
            "find",
            "add",
            "every",
            "has"
          ],
          "patterns": []
        },
        "hasWrapRule": {
          "calls": [
            "parse",
            "walkRules",
            "forEach",
            "includes",
            "find",
            "test",
            "add",
            "every",
            "has"
          ],
          "patterns": []
        }
      }
    },
    "tests/helpers/battleEngineTimer.test.js": {
      "imports": ["vitest", "../../src/data/settings.json"],
      "functions": {}
    },
    "tests/helpers/battleEngineFacade.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/battleEngine.pointsToWin.test.js": {
      "imports": [
        "vitest",
        "../../src/helpers/constants.js",
        "../../src/helpers/battleEngineFacade.js"
      ],
      "functions": {}
    },
    "tests/helpers/battleEngine.coolDown.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/appendCards.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/TimerController.drift.test.js": {
      "imports": ["vitest", "../../src/helpers/TimerController.js"],
      "functions": {
        "onSecondTick": {
          "calls": ["set"],
          "patterns": []
        },
        "cancel": {
          "calls": ["delete"],
          "patterns": []
        }
      }
    },
    "tests/helpers/BattleEngine.test.js": {
      "imports": ["vitest", "../../src/helpers/BattleEngine.js"],
      "functions": {}
    },
    "tests/carousel/metrics.test.js": {
      "imports": ["vitest", "../../src/helpers/carousel/metrics.js"],
      "functions": {
        "makeCard": {
          "calls": ["createElement", "defineProperty"],
          "patterns": []
        },
        "setClientWidth": {
          "calls": ["defineProperty"],
          "patterns": []
        }
      }
    },
    "tests/components/StatsPanel.test.js": {
      "imports": ["vitest", "../../src/components/StatsPanel.js"],
      "functions": {}
    },
    "tests/components/SidebarList.test.js": {
      "imports": ["vitest", "../../src/components/SidebarList.js"],
      "functions": {}
    },
    "tests/components/Scoreboard.test.js": {
      "imports": [
        "vitest",
        "../../src/components/Scoreboard.js",
        "../../src/helpers/showSnackbar.js",
        "../../src/helpers/battleEngineFacade.js",
        "../utils/testUtils.js"
      ],
      "functions": {}
    },
    "tests/components/PlayerInfo.test.js": {
      "imports": ["vitest", "../../src/components/PlayerInfo.js"],
      "functions": {}
    },
    "tests/card/judokaZeroId.test.js": {
      "imports": ["../../src/components/JudokaCard.js"],
      "functions": {}
    },
    "tests/card/judokaCardWeightClass.test.js": {
      "imports": ["../../src/helpers/cardSections.js"],
      "functions": {}
    },
    "tests/card/judokaCardSignatureMove.test.js": {
      "imports": ["../../src/components/JudokaCard.js"],
      "functions": {}
    },
    "tests/card/judokaCardInspectorInvalidData.test.js": {
      "imports": ["vitest", "../../src/components/JudokaCard.js"],
      "functions": {}
    },
    "tests/card/judokaCardHtmlFallback.test.js": {
      "imports": [
        "vitest",
        "../../src/components/JudokaCard.js",
        "../utils/console.js",
        "../../src/helpers/cardRender.js",
        "../../src/components/StatsPanel.js"
      ],
      "functions": {}
    },
    "tests/card/judokaCardFlip.test.js": {
      "imports": ["vitest", "../../src/components/JudokaCard.js"],
      "functions": {}
    },
    "tests/card/judokaCardAccessibility.test.js": {
      "imports": ["../../src/components/JudokaCard.js"],
      "functions": {}
    },
    "tests/card/epicCardBadge.test.js": {
      "imports": ["vitest", "../../src/components/EpicCard.js"],
      "functions": {}
    },
    "tests/card/cardTopBar.test.js": {
      "imports": ["vitest", "../../src/utils/countryCodes.js", "../../src/helpers/cardTopBar.js"],
      "functions": {
        "normalizeHtml": {
          "calls": ["trim", "replace"],
          "patterns": []
        }
      }
    },
    "tests/card/cardBuilder.test.js": {
      "imports": [
        "../../src/helpers/carousel/scroll.js",
        "../../src/helpers/cardRender.js",
        "vitest"
      ],
      "functions": {
        "normalizeHtml": {
          "calls": ["trim", "replace"],
          "patterns": []
        }
      }
    },
    "scripts/lib/debugUtils.js": {
      "imports": [],
      "functions": {
        "buildBaseUrl": {
          "calls": [],
          "patterns": []
        },
        "installSelectorGuard": {
          "calls": ["addInitScript"],
          "patterns": []
        },
        "attachLoggers": {
          "calls": [
            "on",
            "location",
            "type",
            "text",
            "push",
            "log",
            "String",
            "error",
            "url",
            "failure",
            "warn"
          ],
          "patterns": []
        },
        "waitButtonsReady": {
          "calls": ["waitForSelector", "waitForFunction", "querySelector"],
          "patterns": []
        },
        "getStatButtons": {
          "calls": ["catch", "$$eval", "map"],
          "patterns": []
        },
        "tryClickStat": {
          "calls": [
            "click",
            "String",
            "evaluate",
            "querySelector",
            "remove",
            "getBoundingClientRect",
            "round",
            "elementFromPoint",
            "toLowerCase",
            "getComputedStyle",
            "dispatchEvent"
          ],
          "patterns": []
        },
        "getClickDiagnostics": {
          "calls": [
            "catch",
            "evaluate",
            "querySelector",
            "getBoundingClientRect",
            "round",
            "elementFromPoint",
            "toLowerCase",
            "getComputedStyle",
            "String"
          ],
          "patterns": []
        },
        "getBattleSnapshot": {
          "calls": [
            "evaluate",
            "getElementById",
            "byId",
            "map",
            "from",
            "querySelectorAll",
            "isArray",
            "slice",
            "toLowerCase",
            "text",
            "String"
          ],
          "patterns": []
        },
        "byId": {
          "calls": ["getElementById"],
          "patterns": []
        },
        "text": {
          "calls": ["byId"],
          "patterns": []
        },
        "takeScreenshot": {
          "calls": ["screenshot", "log", "warn", "String"],
          "patterns": []
        }
      }
    },
    "playwright/fixtures/waits.js": {
      "imports": ["@playwright/test"],
      "functions": {
        "waitForBattleReady": {
          "calls": ["evaluate"],
          "patterns": []
        },
        "waitForSettingsReady": {
          "calls": ["evaluate"],
          "patterns": []
        },
        "waitForBattleState": {
          "calls": [
            "evaluate",
            "race",
            "onStateTransition",
            "then",
            "waitForTimeout",
            "toHaveAttribute",
            "expect",
            "locator"
          ],
          "patterns": []
        }
      }
    },
    "playwright/fixtures/navigationChecks.js": {
      "imports": ["@playwright/test"],
      "functions": {
        "verifyPageBasics": {
          "calls": ["toHaveTitle", "expect", "toBeVisible", "first", "getByRole", "getByTestId"],
          "patterns": []
        }
      }
    },
    "playwright/fixtures/commonSetup.js": {
      "imports": ["@playwright/test", "./commonRoutes.js"],
      "functions": {}
    },
    "playwright/fixtures/commonRoutes.js": {
      "imports": ["fs"],
      "functions": {
        "registerCommonRoutes": {
          "calls": [
            "all",
            "route",
            "fulfill",
            "split",
            "url",
            "request",
            "pop",
            "existsSync",
            "continue",
            "includes"
          ],
          "patterns": []
        }
      }
    },
    "playwright/fixtures/classicBattleStates.js": {
      "imports": [],
      "functions": {}
    },
    "src/helpers/vectorSearchPage/renderUtils.js": {
      "imports": [],
      "functions": {
        "formatSourcePath": {
          "calls": ["createDocumentFragment", "forEach", "split", "createElement", "appendChild"],
          "patterns": []
        },
        "formatTags": {
          "calls": ["isArray", "join"],
          "patterns": []
        }
      }
    },
    "src/helpers/vectorSearchPage/renderResults.js": {
      "imports": ["../snippetFormatter.js", "./renderUtils.js"],
      "functions": {
        "buildResultRow": {
          "calls": [
            "createElement",
            "add",
            "setAttribute",
            "createSnippetElement",
            "appendChild",
            "formatSourcePath",
            "formatTags",
            "toFixed",
            "find",
            "append"
          ],
          "patterns": []
        },
        "renderResults": {
          "calls": [
            "entries",
            "buildResultRow",
            "addEventListener",
            "loadResultContext",
            "preventDefault",
            "appendChild"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/vectorSearchPage/queryUi.js": {
      "imports": [],
      "functions": {
        "prepareSearchUi": {
          "calls": ["getElementById", "querySelector", "trim"],
          "patterns": []
        },
        "getSelectedTags": {
          "calls": ["getElementById"],
          "patterns": []
        }
      }
    },
    "src/helpers/vectorSearch/scorer.js": {
      "imports": ["./loader.js"],
      "functions": {
        "resolveFirstValid": {
          "calls": ["isArray", "find", "every"],
          "patterns": []
        },
        "validateQueryVector": {
          "calls": ["isArray", "warn"],
          "patterns": []
        },
        "collectValidEntries": {
          "calls": ["isArray", "some", "warn", "push"],
          "patterns": []
        },
        "normalizeStep": {
          "calls": ["resolveFirstValid", "validateQueryVector", "collectValidEntries"],
          "patterns": []
        },
        "tagFilterStep": {
          "calls": ["isArray", "filter", "every", "includes"],
          "patterns": []
        },
        "cosineSimilarity": {
          "calls": ["isArray", "sqrt"],
          "patterns": []
        },
        "scoreEntries": {
          "calls": [
            "filter",
            "split",
            "toLowerCase",
            "String",
            "sort",
            "map",
            "cosineSimilarity",
            "some",
            "includes",
            "min"
          ],
          "patterns": []
        },
        "scoringStep": {
          "calls": ["scoreEntries"],
          "patterns": []
        },
        "limitStep": {
          "calls": ["slice"],
          "patterns": []
        },
        "runPipeline": {
          "calls": ["step"],
          "patterns": []
        },
        "findMatches": {
          "calls": ["loadEmbeddings", "runPipeline"],
          "patterns": []
        }
      }
    },
    "src/helpers/vectorSearch/loader.js": {
      "imports": ["../dataUtils.js", "../constants.js"],
      "functions": {
        "loadEmbeddings": {
          "calls": ["catch", "fetchJson", "error"],
          "patterns": []
        }
      }
    },
    "src/helpers/vectorSearch/index.js": {
      "imports": ["./loader.js", "./scorer.js", "./context.js", "../vectorSearchQuery.js"],
      "functions": {}
    },
    "src/helpers/vectorSearch/context.js": {
      "imports": [],
      "functions": {
        "splitIntoSections": {
          "calls": ["test", "trim", "join", "slice", "push", "collectHeadingSections"],
          "patterns": []
        },
        "collectHeadingSections": {
          "calls": ["exec", "trim", "join", "slice", "push"],
          "patterns": []
        },
        "chunkSection": {
          "calls": ["push", "slice"],
          "patterns": []
        },
        "chunkMarkdown": {
          "calls": ["split", "splitIntoSections", "push", "chunkSection"],
          "patterns": []
        },
        "fetchContextById": {
          "calls": [
            "exec",
            "Number",
            "fetch",
            "text",
            "chunkMarkdown",
            "max",
            "min",
            "slice",
            "error"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/tooltipViewer/renderList.js": {
      "imports": ["../tooltip.js", "../../components/SidebarList.js"],
      "functions": {
        "renderList": {
          "calls": [
            "filter",
            "split",
            "toLowerCase",
            "forEach",
            "entries",
            "every",
            "includes",
            "trim",
            "test",
            "parseTooltipText",
            "push",
            "String",
            "select",
            "from",
            "createElement",
            "setAttribute",
            "append",
            "replaceWith",
            "bind"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/tooltipViewer/extractLineAndColumn.js": {
      "imports": [],
      "functions": {
        "extractLineAndColumn": {
          "calls": ["exec", "Number"],
          "patterns": []
        }
      }
    },
    "src/helpers/settings/makeHandleUpdate.js": {
      "imports": ["../settingsStorage.js"],
      "functions": {
        "makeHandleUpdate": {
          "calls": [
            "catch",
            "then",
            "updateSetting",
            "setCurrentSettings",
            "error",
            "showErrorAndRevert"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/settings/listenerUtils.js": {
      "imports": [
        "../displayMode.js",
        "../viewTransition.js",
        "../motionUtils.js",
        "../showSnackbar.js"
      ],
      "functions": {
        "attachToggleListeners": {
          "calls": [
            "addEventListener",
            "catch",
            "then",
            "resolve",
            "handleUpdate",
            "showSnackbar",
            "applyMotionPreference",
            "forEach",
            "getCurrentSettings",
            "withViewTransition",
            "applyDisplayMode",
            "find",
            "from",
            "toUpperCase",
            "charAt",
            "slice"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/settings/index.js": {
      "imports": [],
      "functions": {}
    },
    "src/helpers/settings/gameModeSwitches.js": {
      "imports": [
        "../../components/ToggleSwitch.js",
        "../gameModeUtils.js",
        "../showSettingsError.js",
        "../showSnackbar.js",
        "../navigation/navigationService.js"
      ],
      "functions": {
        "handleGameModeChange": {
          "calls": [
            "getCurrentSettings",
            "catch",
            "then",
            "resolve",
            "handleUpdate",
            "showSnackbar",
            "updateNavigationItemHidden",
            "error",
            "showSettingsError",
            "all"
          ],
          "patterns": []
        },
        "renderGameModeSwitches": {
          "calls": [
            "isArray",
            "warn",
            "sort",
            "forEach",
            "getCurrentSettings",
            "hasOwn",
            "navTooltipKey",
            "String",
            "createElement",
            "appendChild",
            "setAttribute",
            "addEventListener",
            "handleGameModeChange"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/settings/featureFlagSwitches.js": {
      "imports": [
        "../../components/ToggleSwitch.js",
        "../showSnackbar.js",
        "../viewportDebug.js",
        "../tooltipOverlayDebug.js",
        "../layoutDebugPanel.js"
      ],
      "functions": {
        "handleFeatureFlagChange": {
          "calls": [
            "getCurrentSettings",
            "catch",
            "then",
            "resolve",
            "handleUpdate",
            "showSnackbar",
            "toggleViewportSimulation",
            "toggleTooltipOverlayDebug",
            "toggleLayoutDebugPanel"
          ],
          "patterns": []
        },
        "formatFlagLabel": {
          "calls": ["replace", "String", "toUpperCase"],
          "patterns": []
        },
        "renderFeatureFlagSwitches": {
          "calls": [
            "forEach",
            "keys",
            "toLowerCase",
            "replace",
            "formatFlagLabel",
            "getDescription",
            "Boolean",
            "getCurrentSettings",
            "createElement",
            "appendChild",
            "setAttribute",
            "removeAttribute",
            "querySelector",
            "insertBefore",
            "addEventListener",
            "handleFeatureFlagChange"
          ],
          "patterns": []
        },
        "getDescription": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/settings/applyInitialValues.js": {
      "imports": ["../../config/settingsDefaults.js", "../../config/loadSettings.js"],
      "functions": {
        "applyInitialControlValues": {
          "calls": [
            "Boolean",
            "forEach",
            "applyInputState",
            "querySelector",
            "closest",
            "getElementById"
          ],
          "patterns": []
        },
        "applyInputState": {
          "calls": ["Boolean"],
          "patterns": []
        },
        "applyInitialValues": {
          "calls": ["catch", "loadSettings", "applyInitialControlValues"],
          "patterns": []
        }
      }
    },
    "src/helpers/settings/addNavResetButton.js": {
      "imports": [
        "../../components/Button.js",
        "../navigationCache.js",
        "../navigationBar.js",
        "../showSnackbar.js",
        "../featureFlags.js"
      ],
      "functions": {
        "addNavResetButton": {
          "calls": [
            "getElementById",
            "remove",
            "isEnabled",
            "createElement",
            "createButton",
            "appendChild",
            "addEventListener",
            "resetNavigationCache",
            "populateNavbar",
            "showSnackbar"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/quotes/quoteService.js": {
      "imports": ["../constants.js", "../testModeUtils.js"],
      "functions": {
        "fetchFables": {
          "calls": ["all", "fetch", "json", "map", "get"],
          "patterns": []
        },
        "displayRandomQuote": {
          "calls": ["fetchFables", "max", "map", "floor", "seededRandom", "find", "error"],
          "patterns": []
        }
      }
    },
    "src/helpers/quotes/quoteRenderer.js": {
      "imports": ["../utils.js"],
      "functions": {
        "checkAssetsReady": {
          "calls": ["remove", "querySelector"],
          "patterns": []
        },
        "formatFableStory": {
          "calls": ["replace", "String", "join", "map", "filter", "split", "trim"],
          "patterns": []
        },
        "renderQuote": {
          "calls": ["getElementById", "formatFableStory", "escapeHTML"],
          "patterns": []
        },
        "renderFallback": {
          "calls": ["getElementById"],
          "patterns": []
        },
        "notifyQuoteReady": {
          "calls": ["resolveQuoteReady", "dispatchEvent"],
          "patterns": []
        },
        "displayFable": {
          "calls": [
            "getElementById",
            "checkAssetsReady",
            "renderQuote",
            "renderFallback",
            "add",
            "remove",
            "setAttribute",
            "focus",
            "notifyQuoteReady"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/pseudoJapanese/ui.js": {
      "imports": ["./converter.js"],
      "functions": {
        "convertElementToPseudoJapanese": {
          "calls": [
            "createTreeWalker",
            "nextNode",
            "push",
            "allSettled",
            "map",
            "convertToPseudoJapanese",
            "forEach",
            "error"
          ],
          "patterns": []
        },
        "setupLanguageToggle": {
          "calls": [
            "getElementById",
            "add",
            "setAttribute",
            "addEventListener",
            "setTimeout",
            "cloneNode",
            "convertElementToPseudoJapanese",
            "toggle",
            "remove",
            "String",
            "error"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/pseudoJapanese/converter.js": {
      "imports": ["../constants.js", "../testModeUtils.js"],
      "functions": {
        "loadConverter": {
          "calls": ["fetch", "json"],
          "patterns": []
        },
        "convertToPseudoJapanese": {
          "calls": [
            "loadConverter",
            "replace",
            "String",
            "flat",
            "values",
            "test",
            "join",
            "map",
            "split",
            "toLowerCase",
            "floor",
            "seededRandom"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/navigation/navigationUI.js": {
      "imports": ["./navigationService.js"],
      "functions": {
        "clearBottomNavbar": {
          "calls": ["querySelector"],
          "patterns": []
        },
        "preserveLogoAndWire": {
          "calls": ["clearBottomNavbar", "appendChild", "addEventListener", "toggle", "contains"],
          "patterns": []
        },
        "buildMenu": {
          "calls": [
            "matchMedia",
            "querySelector",
            "validateGameModes",
            "createElement",
            "escapeHtml",
            "navTooltipKey",
            "join",
            "map",
            "preserveLogoAndWire"
          ],
          "patterns": []
        },
        "setupHamburger": {
          "calls": [
            "querySelector",
            "createElement",
            "setAttribute",
            "getAttribute",
            "String",
            "toggle",
            "addEventListener",
            "contains",
            "insertBefore",
            "remove",
            "update",
            "removeEventListener"
          ],
          "patterns": []
        },
        "toggle": {
          "calls": ["getAttribute", "setAttribute", "String", "toggle"],
          "patterns": []
        },
        "update": {
          "calls": ["contains", "insertBefore", "setAttribute", "remove"],
          "patterns": []
        }
      }
    },
    "src/helpers/navigation/navigationService.js": {
      "imports": ["../debug.js"],
      "functions": {
        "navTooltipKey": {
          "calls": [
            "join",
            "map",
            "split",
            "trim",
            "replace",
            "String",
            "toLowerCase",
            "toUpperCase",
            "slice"
          ],
          "patterns": []
        },
        "escapeHtml": {
          "calls": ["replace", "String"],
          "patterns": []
        },
        "validateGameModes": {
          "calls": ["filter", "debugLog"],
          "patterns": []
        }
      }
    },
    "src/helpers/navigation/navMenu.js": {
      "imports": ["./navigationUI.js", "./navigationService.js"],
      "functions": {
        "toggleExpandedMapView": {
          "calls": ["buildMenu"],
          "patterns": []
        },
        "togglePortraitTextMenu": {
          "calls": ["buildMenu"],
          "patterns": []
        },
        "setupHamburgerMenu": {
          "calls": ["setupHamburger"],
          "patterns": []
        }
      }
    },
    "src/helpers/navigation/navData.js": {
      "imports": ["../settingsStorage.js", "../gameModeUtils.js", "./navigationService.js"],
      "functions": {
        "loadMenuModes": {
          "calls": [
            "loadNavigationItems",
            "loadSettings",
            "validateGameModes",
            "sort",
            "map",
            "filter"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/inspector/createInspectorPanel.js": {
      "imports": [],
      "functions": {
        "createInspectorPanel": {
          "calls": [
            "stringify",
            "createElement",
            "setAttribute",
            "addEventListener",
            "preventDefault",
            "dispatchEvent",
            "appendChild",
            "removeAttribute",
            "updateDataset"
          ],
          "patterns": ["factory"]
        },
        "updateDataset": {
          "calls": ["setAttribute", "removeAttribute"],
          "patterns": []
        }
      }
    },
    "src/helpers/country/list.js": {
      "imports": ["../constants.js", "../dataUtils.js", "../api/countryService.js"],
      "functions": {
        "fetchActiveCountries": {
          "calls": [
            "fetchJson",
            "isArray",
            "filter",
            "map",
            "loadCountryMapping",
            "sort",
            "values",
            "localeCompare",
            "has"
          ],
          "patterns": []
        },
        "renderAllButton": {
          "calls": ["createElement", "setAttribute", "appendChild"],
          "patterns": []
        },
        "determineBatchSize": {
          "calls": ["test"],
          "patterns": []
        },
        "initLazyFlagLoader": {
          "calls": ["unobserve"],
          "patterns": []
        },
        "renderCountryBatch": {
          "calls": [
            "createElement",
            "setAttribute",
            "get",
            "getFlagUrl",
            "observe",
            "warn",
            "appendChild"
          ],
          "patterns": []
        },
        "loadNextCountryBatch": {
          "calls": ["get", "slice", "renderCountryBatch"],
          "patterns": []
        },
        "populateCountryList": {
          "calls": [
            "fetchActiveCountries",
            "createElement",
            "replaceChildren",
            "renderAllButton",
            "determineBatchSize",
            "initLazyFlagLoader",
            "set",
            "loadNextCountryBatch",
            "removeEventListener",
            "addEventListener",
            "error"
          ],
          "patterns": []
        },
        "handleScroll": {
          "calls": ["loadNextCountryBatch", "removeEventListener"],
          "patterns": []
        }
      }
    },
    "src/helpers/country/codes.js": {
      "imports": ["../api/countryService.js"],
      "functions": {
        "getCountryNameFromCode": {
          "calls": ["getCountryName"],
          "patterns": []
        },
        "getFlagUrl": {
          "calls": ["serviceGetFlagUrl"],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/view.js": {
      "imports": [
        "../setupScoreboard.js",
        "./quitButton.js",
        "./skipHandler.js",
        "./interruptHandlers.js",
        "./uiHelpers.js",
        "./battleEvents.js",
        "../battleStateProgress.js",
        "../tooltip.js",
        "../../utils/scheduler.js",
        "../setupBottomNavbar.js",
        "../setupDisplaySettings.js",
        "../setupSvgFallback.js",
        "../setupClassicBattleHomeLink.js"
      ],
      "functions": {}
    },
    "src/helpers/classicBattle/uiService.js": {
      "imports": [
        "../battleEngineFacade.js",
        "../setupScoreboard.js",
        "../../components/Modal.js",
        "../../components/Button.js",
        "../navUtils.js",
        "./uiHelpers.js",
        "./battleEvents.js"
      ],
      "functions": {
        "syncScoreDisplay": {
          "calls": ["getScores", "updateScore", "getElementById", "createElement", "append"],
          "patterns": []
        },
        "showMatchSummaryModal": {
          "calls": [
            "createElement",
            "createButton",
            "append",
            "createDocumentFragment",
            "createModal",
            "addEventListener",
            "close",
            "destroy",
            "navigateToHome",
            "onNext",
            "appendChild",
            "open"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/uiHelpers.js": {
      "imports": [
        "./opponentController.js",
        "../featureFlags.js",
        "../battleEngineFacade.js",
        "../testModeUtils.js",
        "../../components/JudokaCard.js",
        "../lazyPortrait.js",
        "../showSnackbar.js",
        "../setupScoreboard.js",
        "../battle/index.js",
        "../motionUtils.js",
        "../../utils/scheduler.js",
        "./selectionHandler.js",
        "./cardStatUtils.js",
        "./cardSelection.js",
        "./timerService.js",
        "../stats.js",
        "../viewportDebug.js",
        "../cardUtils.js",
        "../../components/Modal.js",
        "../../components/Button.js",
        "./uiService.js",
        "./battleEvents.js"
      ],
      "functions": {
        "getDebugOutputEl": {
          "calls": ["getElementById"],
          "patterns": []
        },
        "ensureDebugCopyButton": {
          "calls": [
            "querySelector",
            "createButton",
            "addEventListener",
            "preventDefault",
            "stopPropagation",
            "getDebugOutputEl",
            "writeText",
            "appendChild"
          ],
          "patterns": []
        },
        "showSelectionPrompt": {
          "calls": [
            "getElementById",
            "showSnackbar",
            "emitBattleEvent",
            "isTestModeEnabled",
            "warn"
          ],
          "patterns": []
        },
        "renderOpponentCard": {
          "calls": ["render", "debug", "querySelector", "appendChild", "setupLazyPortraits"],
          "patterns": []
        },
        "enableNextRoundButton": {
          "calls": ["getElementById"],
          "patterns": []
        },
        "disableNextRoundButton": {
          "calls": ["getElementById"],
          "patterns": []
        },
        "collectDebugState": {
          "calls": [
            "getScores",
            "getTimerState",
            "isMatchEnded",
            "isTestModeEnabled",
            "getCurrentSeed",
            "isArray",
            "slice",
            "addMachineDiagnostics",
            "getElementById"
          ],
          "patterns": []
        },
        "addMachineDiagnostics": {
          "calls": ["getMachine", "getState", "get", "isArray", "map"],
          "patterns": []
        },
        "renderDebugState": {
          "calls": ["stringify"],
          "patterns": []
        },
        "updateDebugPanel": {
          "calls": ["getDebugOutputEl", "collectDebugState", "renderDebugState"],
          "patterns": []
        },
        "showRoundOutcome": {
          "calls": ["showResult", "showMessage", "showSnackbar"],
          "patterns": []
        },
        "showStatComparison": {
          "calls": [
            "getElementById",
            "cancelFrame",
            "toUpperCase",
            "charAt",
            "slice",
            "match",
            "Number",
            "shouldReduceMotionSync",
            "now",
            "min",
            "round",
            "scheduleFrame"
          ],
          "patterns": []
        },
        "step": {
          "calls": ["min", "round", "cancelFrame", "scheduleFrame"],
          "patterns": []
        },
        "watchBattleOrientation": {
          "calls": [
            "resolve",
            "callback",
            "scheduleFrame",
            "then",
            "invoke",
            "cancelFrame",
            "pollIfMissing",
            "requestAnimationFrame",
            "addEventListener"
          ],
          "patterns": []
        },
        "invoke": {
          "calls": ["resolve", "callback"],
          "patterns": []
        },
        "pollIfMissing": {
          "calls": ["scheduleFrame", "then", "invoke", "cancelFrame"],
          "patterns": []
        },
        "onChange": {
          "calls": ["then", "invoke", "pollIfMissing", "requestAnimationFrame"],
          "patterns": []
        },
        "showRetryModal": {
          "calls": [
            "getElementById",
            "createElement",
            "createButton",
            "appendChild",
            "createDocumentFragment",
            "append",
            "createModal",
            "addEventListener",
            "close",
            "destroy",
            "retryFn",
            "open"
          ],
          "patterns": []
        },
        "registerRoundStartErrorHandler": {
          "calls": ["showMessage", "showRetryModal", "addEventListener", "removeEventListener"],
          "patterns": []
        },
        "onError": {
          "calls": ["showMessage", "showRetryModal"],
          "patterns": []
        },
        "setupNextButton": {
          "calls": [
            "getElementById",
            "addEventListener",
            "onNextButtonClick",
            "getNextRoundControls"
          ],
          "patterns": []
        },
        "resetStatButtonsReady": {
          "calls": [],
          "patterns": []
        },
        "setStatButtonsEnabled": {
          "calls": [
            "forEach",
            "toggle",
            "String",
            "resolveReady",
            "isTestModeEnabled",
            "warn",
            "resetStatButtonsReady"
          ],
          "patterns": []
        },
        "selectStat": {
          "calls": [
            "querySelector",
            "setStatButtonsEnabled",
            "add",
            "getElementById",
            "getCardStatValue",
            "getOpponentJudoka",
            "Number",
            "isFinite",
            "catch",
            "resolve",
            "handleStatSelection",
            "showSnackbar"
          ],
          "patterns": []
        },
        "initStatButtons": {
          "calls": [
            "querySelectorAll",
            "getElementById",
            "resetStatButtonsReady",
            "setStatButtonsEnabled",
            "forEach",
            "selectStat",
            "addEventListener",
            "preventDefault",
            "handler"
          ],
          "patterns": []
        },
        "handler": {
          "calls": ["selectStat"],
          "patterns": []
        },
        "applyStatLabels": {
          "calls": ["loadStatNames", "forEach", "querySelector", "String", "setAttribute"],
          "patterns": []
        },
        "updateBattleStateBadge": {
          "calls": ["getElementById"],
          "patterns": []
        },
        "setBattleStateBadgeEnabled": {
          "calls": [
            "getElementById",
            "remove",
            "querySelector",
            "createElement",
            "setAttribute",
            "appendChild",
            "updateBattleStateBadge"
          ],
          "patterns": []
        },
        "applyBattleFeatureFlags": {
          "calls": [
            "String",
            "isEnabled",
            "toggle",
            "setTestMode",
            "toggleInspectorPanels",
            "toggleViewportSimulation",
            "setDebugPanelEnabled",
            "addEventListener"
          ],
          "patterns": []
        },
        "initDebugPanel": {
          "calls": [
            "getElementById",
            "isEnabled",
            "createElement",
            "querySelector",
            "setAttribute",
            "append",
            "replaceWith",
            "ensureDebugCopyButton",
            "getItem",
            "addEventListener",
            "setItem",
            "String",
            "before",
            "remove"
          ],
          "patterns": []
        },
        "setDebugPanelEnabled": {
          "calls": [
            "getElementById",
            "createElement",
            "setAttribute",
            "append",
            "querySelector",
            "replaceWith",
            "ensureDebugCopyButton",
            "getItem",
            "addEventListener",
            "setItem",
            "String",
            "remove",
            "before",
            "add"
          ],
          "patterns": []
        },
        "maybeShowStatHint": {
          "calls": ["getItem", "getElementById", "dispatchEvent", "setTimeoutFn", "setItem"],
          "patterns": []
        },
        "resetBattleUI": {
          "calls": [
            "forEach",
            "querySelectorAll",
            "remove",
            "destroy",
            "getElementById",
            "cloneNode",
            "addEventListener",
            "onNextButtonClick",
            "getNextRoundControls",
            "replaceWith",
            "clearMessage",
            "syncScoreDisplay",
            "updateDebugPanel"
          ],
          "patterns": []
        },
        "setOpponentDelay": {
          "calls": ["isFinite"],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/timerService.js": {
      "imports": [
        "../timerUtils.js",
        "../battleEngineFacade.js",
        "../setupScoreboard.js",
        "./uiHelpers.js",
        "../showSnackbar.js",
        "./skipHandler.js",
        "./autoSelectStat.js",
        "./battleEvents.js",
        "../scheduler.js",
        "../testModeUtils.js",
        "./battleDispatcher.js"
      ],
      "functions": {
        "onNextButtonClick": {
          "calls": [
            "getElementById",
            "dispatchBattleEvent",
            "resolveReady",
            "setSkipHandler",
            "stop"
          ],
          "patterns": []
        },
        "getNextRoundControls": {
          "calls": [],
          "patterns": []
        },
        "forceAutoSelectAndDispatch": {
          "calls": ["showMessage", "autoSelectStat", "dispatchBattleEvent"],
          "patterns": []
        },
        "startTimer": {
          "calls": [
            "getElementById",
            "clearTimer",
            "setSkipHandler",
            "dispatchBattleEvent",
            "autoSelectStat",
            "getDefaultTimer",
            "showTemporaryMessage",
            "createRoundTimer",
            "forceAutoSelectAndDispatch",
            "stop",
            "start",
            "restore"
          ],
          "patterns": []
        },
        "onTick": {
          "calls": ["clearTimer"],
          "patterns": []
        },
        "onExpired": {
          "calls": ["handleNextRoundExpiration"],
          "patterns": []
        },
        "handleStatSelectionTimeout": {
          "calls": ["showMessage", "setTimeout", "autoSelectStat"],
          "patterns": []
        },
        "createRoundTimer": {
          "calls": [
            "starter",
            "onExpired",
            "onDriftFail",
            "onExpiredInternal",
            "getElementById",
            "showSnackbar",
            "showMessage",
            "start",
            "stopTimer"
          ],
          "patterns": ["factory"]
        },
        "start": {
          "calls": ["starter"],
          "patterns": []
        },
        "onExpiredInternal": {
          "calls": ["onExpired"],
          "patterns": []
        },
        "handleDrift": {
          "calls": [
            "onDriftFail",
            "onExpiredInternal",
            "getElementById",
            "showSnackbar",
            "showMessage",
            "start"
          ],
          "patterns": []
        },
        "stop": {
          "calls": ["stopTimer", "onExpiredInternal"],
          "patterns": []
        },
        "computeNextRoundCooldown": {
          "calls": ["isTestModeEnabled", "max", "round", "warn"],
          "patterns": []
        },
        "createNextRoundSnackbarRenderer": {
          "calls": ["showSnackbar", "updateSnackbar", "clearTimer"],
          "patterns": ["factory"]
        },
        "handleZeroCooldownFastPath": {
          "calls": [
            "showSnackbar",
            "setSkipHandler",
            "dispatchBattleEvent",
            "updateDebugPanel",
            "emitBattleEvent",
            "resolveReady"
          ],
          "patterns": []
        },
        "handleNextRoundExpiration": {
          "calls": [
            "setSkipHandler",
            "clearTimer",
            "dispatchBattleEvent",
            "updateDebugPanel",
            "resolveReady"
          ],
          "patterns": []
        },
        "scheduleNextRound": {
          "calls": [
            "emitBattleEvent",
            "resolve",
            "setSkipHandler",
            "resolveReady",
            "getElementById",
            "computeNextRoundCooldown",
            "handleZeroCooldownFastPath",
            "createNextRoundSnackbarRenderer",
            "handleNextRoundExpiration",
            "createRoundTimer",
            "warn",
            "stop",
            "onTick",
            "setTimeout",
            "start"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/stateTable.js": {
      "imports": [],
      "functions": {}
    },
    "src/helpers/classicBattle/stateMachine.js": {
      "imports": ["./stateTable.js"],
      "functions": {}
    },
    "src/helpers/classicBattle/skipHandler.js": {
      "imports": [],
      "functions": {
        "setSkipHandler": {
          "calls": ["dispatchEvent", "Boolean", "skipHandler"],
          "patterns": []
        },
        "skipCurrentPhase": {
          "calls": ["setSkipHandler", "setTimeout", "fn"],
          "patterns": []
        },
        "resetSkipState": {
          "calls": ["dispatchEvent"],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/selectionHandler.js": {
      "imports": [
        "../battleEngineFacade.js",
        "../api/battleUI.js",
        "./battleEvents.js",
        "./eventDispatcher.js",
        "./roundResolver.js",
        "./cardStatUtils.js"
      ],
      "functions": {
        "simulateOpponentStat": {
          "calls": ["map", "Number", "chooseOpponentStat"],
          "patterns": []
        },
        "handleStatSelection": {
          "calls": [
            "isNaN",
            "getCardStatValue",
            "querySelector",
            "Number",
            "stopTimer",
            "clearTimeout",
            "emitBattleEvent",
            "setTimeout",
            "finally",
            "catch",
            "resolveRound",
            "dispatchBattleEvent"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/roundUI.js": {
      "imports": [
        "./uiHelpers.js",
        "../battle/index.js",
        "./uiService.js",
        "./timerService.js",
        "../setupScoreboard.js",
        "./selectionHandler.js",
        "./roundManager.js",
        "./battleEvents.js",
        "./cardStatUtils.js",
        "./cardSelection.js",
        "../showSnackbar.js"
      ],
      "functions": {
        "applyRoundUI": {
          "calls": [
            "log",
            "resetStatButtons",
            "disableNextRoundButton",
            "getElementById",
            "syncScoreDisplay",
            "updateRoundCounter",
            "showSelectionPrompt",
            "startTimer",
            "getCardStatValue",
            "getOpponentJudoka",
            "Number",
            "isFinite",
            "handleStatSelection",
            "setTimeout",
            "handleStatSelectionTimeout",
            "updateDebugPanel"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/roundSelectModal.js": {
      "imports": [
        "../dataUtils.js",
        "../constants.js",
        "../../components/Button.js",
        "../../components/Modal.js",
        "../battleEngineFacade.js",
        "../tooltip.js",
        "../testModeUtils.js",
        "./battleEvents.js"
      ],
      "functions": {
        "initRoundSelectModal": {
          "calls": [
            "get",
            "setPointsToWin",
            "onStart",
            "isTestModeEnabled",
            "fetchJson",
            "error",
            "createElement",
            "createDocumentFragment",
            "append",
            "createModal",
            "forEach",
            "createButton",
            "addEventListener",
            "close",
            "cleanupTooltips",
            "destroy",
            "appendChild",
            "initTooltips",
            "open",
            "emitBattleEvent"
          ],
          "patterns": []
        },
        "cleanupTooltips": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/roundResolver.js": {
      "imports": [
        "../api/battleUI.js",
        "./eventDispatcher.js",
        "./battleEvents.js",
        "../battle/battleUI.js"
      ],
      "functions": {
        "evaluateRoundData": {
          "calls": ["evaluateRoundApi"],
          "patterns": []
        },
        "evaluateRound": {
          "calls": ["evaluateRoundData"],
          "patterns": []
        },
        "computeRoundResult": {
          "calls": ["evaluateRound", "dispatchBattleEvent", "resetStatButtons", "emitBattleEvent"],
          "patterns": []
        },
        "resolveRound": {
          "calls": ["dispatchBattleEvent", "sleep", "emitBattleEvent", "computeRoundResult"],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/roundManager.js": {
      "imports": [
        "./cardSelection.js",
        "../battleEngineFacade.js",
        "../../utils/scheduler.js",
        "./skipHandler.js",
        "./battleEvents.js"
      ],
      "functions": {
        "createBattleStore": {
          "calls": [],
          "patterns": ["factory"]
        },
        "getStartRound": {
          "calls": ["startRound"],
          "patterns": []
        },
        "handleReplay": {
          "calls": ["resetEngineForTest", "dispatchEvent", "getStartRound", "startRoundFn"],
          "patterns": []
        },
        "startRound": {
          "calls": ["drawCards", "getRoundsPlayed", "emitBattleEvent"],
          "patterns": []
        },
        "_resetForTest": {
          "calls": [
            "resetSkipState",
            "resetSelection",
            "_resetForTest",
            "stopScheduler",
            "clearTimeout",
            "cancelFrame",
            "dispatchEvent"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/quitModal.js": {
      "imports": [
        "../../components/Modal.js",
        "../../components/Button.js",
        "../battleEngineFacade.js",
        "../battle/index.js",
        "../navUtils.js",
        "./eventBus.js"
      ],
      "functions": {
        "createQuitConfirmation": {
          "calls": [
            "createElement",
            "createButton",
            "append",
            "createDocumentFragment",
            "createModal",
            "addEventListener",
            "close",
            "onConfirm",
            "dispatchBattleEvent",
            "getBattleState",
            "destroy",
            "navigateToHome",
            "appendChild"
          ],
          "patterns": ["factory"]
        },
        "quitMatch": {
          "calls": [
            "createQuitConfirmation",
            "quitMatch",
            "showResult",
            "getElementById",
            "open",
            "resolveBtn",
            "requestAnimationFrame",
            "check"
          ],
          "patterns": []
        },
        "check": {
          "calls": ["getElementById", "resolveBtn", "requestAnimationFrame"],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/quitButton.js": {
      "imports": [],
      "functions": {
        "initQuitButton": {
          "calls": ["getElementById", "addEventListener", "quitMatch"],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/promises.js": {
      "imports": ["./battleEvents.js"],
      "functions": {
        "setupPromise": {
          "calls": ["reset", "onBattleEvent", "resolve"],
          "patterns": []
        },
        "reset": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/orchestratorHandlers.js": {
      "imports": [
        "./roundSelectModal.js",
        "../timerUtils.js",
        "./cardSelection.js",
        "../battle/index.js",
        "./timerService.js",
        "./battleEvents.js",
        "./roundResolver.js"
      ],
      "functions": {
        "isStateTransition": {
          "calls": [],
          "patterns": []
        },
        "waitingForMatchStartEnter": {
          "calls": [
            "isStateTransition",
            "doResetGame",
            "emitBattleEvent",
            "initRoundSelectModal",
            "setTimeout",
            "dispatch",
            "resolve"
          ],
          "patterns": []
        },
        "waitingForMatchStartExit": {
          "calls": [],
          "patterns": []
        },
        "matchStartEnter": {
          "calls": ["dispatch"],
          "patterns": []
        },
        "matchStartExit": {
          "calls": [],
          "patterns": []
        },
        "cooldownEnter": {
          "calls": [
            "getDefaultTimer",
            "offBattleEvent",
            "clearTimeout",
            "dispatch",
            "onBattleEvent",
            "emitBattleEvent",
            "setTimeout"
          ],
          "patterns": []
        },
        "onFinished": {
          "calls": ["offBattleEvent", "clearTimeout", "dispatch"],
          "patterns": []
        },
        "cooldownExit": {
          "calls": [],
          "patterns": []
        },
        "roundStartEnter": {
          "calls": ["startRoundWrapper", "doStartRound", "emitBattleEvent", "dispatch"],
          "patterns": []
        },
        "roundStartExit": {
          "calls": [],
          "patterns": []
        },
        "waitingForPlayerActionEnter": {
          "calls": ["emitBattleEvent", "dispatch"],
          "patterns": []
        },
        "waitingForPlayerActionExit": {
          "calls": ["emitBattleEvent"],
          "patterns": []
        },
        "roundDecisionEnter": {
          "calls": [
            "getElementById",
            "getStatValue",
            "getOpponentJudoka",
            "Number",
            "isFinite",
            "resolveRound",
            "now",
            "emitBattleEvent",
            "resolveImmediate",
            "dispatch",
            "setTimeout",
            "isStateTransition",
            "scheduleNextRound"
          ],
          "patterns": []
        },
        "resolveImmediate": {
          "calls": [
            "getElementById",
            "getStatValue",
            "getOpponentJudoka",
            "Number",
            "isFinite",
            "resolveRound"
          ],
          "patterns": []
        },
        "roundDecisionExit": {
          "calls": [],
          "patterns": []
        },
        "roundOverEnter": {
          "calls": [],
          "patterns": []
        },
        "roundOverExit": {
          "calls": [],
          "patterns": []
        },
        "matchDecisionEnter": {
          "calls": [],
          "patterns": []
        },
        "matchDecisionExit": {
          "calls": [],
          "patterns": []
        },
        "matchOverEnter": {
          "calls": [],
          "patterns": []
        },
        "matchOverExit": {
          "calls": [],
          "patterns": []
        },
        "interruptRoundEnter": {
          "calls": ["emitBattleEvent", "dispatch"],
          "patterns": []
        },
        "interruptRoundExit": {
          "calls": [],
          "patterns": []
        },
        "interruptMatchEnter": {
          "calls": ["emitBattleEvent", "dispatch"],
          "patterns": []
        },
        "interruptMatchExit": {
          "calls": [],
          "patterns": []
        },
        "roundModificationEnter": {
          "calls": ["emitBattleEvent", "dispatch"],
          "patterns": []
        },
        "roundModificationExit": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/orchestrator.js": {
      "imports": [
        "./stateMachine.js",
        "./orchestratorHandlers.js",
        "./roundManager.js",
        "./battleEvents.js",
        "./eventDispatcher.js"
      ],
      "functions": {
        "onStateTransition": {
          "calls": [
            "getState",
            "resolve",
            "setTimeout",
            "removeWaiter",
            "reject",
            "get",
            "push",
            "set"
          ],
          "patterns": []
        },
        "removeWaiter": {
          "calls": ["get", "indexOf", "splice", "delete"],
          "patterns": []
        },
        "getBattleStateMachine": {
          "calls": [],
          "patterns": []
        },
        "initClassicBattleOrchestrator": {
          "calls": [
            "dispatchEvent",
            "now",
            "isArray",
            "push",
            "shift",
            "getElementById",
            "createElement",
            "appendChild",
            "String",
            "getTimerState",
            "stringify",
            "emitBattleEvent",
            "get",
            "delete",
            "clearTimeout",
            "resolve",
            "create",
            "setMachine",
            "addEventListener",
            "handleTabInactive",
            "handleTabActive",
            "handleTimerDrift",
            "injectError",
            "dispatch",
            "slice"
          ],
          "patterns": []
        },
        "onTransition": {
          "calls": [
            "dispatchEvent",
            "now",
            "isArray",
            "push",
            "shift",
            "getElementById",
            "createElement",
            "appendChild",
            "String",
            "getTimerState",
            "stringify",
            "emitBattleEvent",
            "get",
            "delete",
            "clearTimeout",
            "resolve"
          ],
          "patterns": []
        },
        "dispatchBattleEvent": {
          "calls": ["dispatch", "emitBattleEvent"],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/opponentController.js": {
      "imports": ["./cardSelection.js", "../settingsStorage.js", "../featureFlags.js"],
      "functions": {
        "getOpponentCardData": {
          "calls": [
            "getOpponentJudoka",
            "getGokyoLookup",
            "getOrLoadGokyoLookup",
            "loadSettings",
            "isEnabled",
            "clearOpponentJudoka"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/interruptHandlers.js": {
      "imports": [
        "../battleEngineFacade.js",
        "./orchestrator.js",
        "../setupScoreboard.js",
        "../../utils/scheduler.js",
        "./skipHandler.js",
        "../../components/Modal.js",
        "../../components/Button.js"
      ],
      "functions": {
        "initInterruptHandlers": {
          "calls": [
            "clearTimeout",
            "cancelFrame",
            "resetSkipState",
            "clearTimer",
            "stopScheduler",
            "cleanup",
            "interruptMatch",
            "showMessage",
            "dispatchBattleEvent",
            "showErrorDialog",
            "addEventListener"
          ],
          "patterns": []
        },
        "cleanup": {
          "calls": ["clearTimeout", "cancelFrame", "resetSkipState", "clearTimer", "stopScheduler"],
          "patterns": []
        },
        "handleNavigation": {
          "calls": ["cleanup", "interruptMatch", "showMessage", "dispatchBattleEvent"],
          "patterns": []
        },
        "handleError": {
          "calls": ["cleanup", "interruptMatch", "showErrorDialog", "dispatchBattleEvent"],
          "patterns": []
        },
        "showErrorDialog": {
          "calls": [
            "showMessage",
            "createElement",
            "createButton",
            "addEventListener",
            "reload",
            "appendChild",
            "createDocumentFragment",
            "append",
            "createModal",
            "querySelector",
            "open"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/eventDispatcher.js": {
      "imports": [],
      "functions": {
        "setMachine": {
          "calls": [],
          "patterns": []
        },
        "dispatchBattleEvent": {
          "calls": ["dispatch"],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/eventBus.js": {
      "imports": [],
      "functions": {
        "dispatcher": {
          "calls": [],
          "patterns": []
        },
        "stateGetter": {
          "calls": [],
          "patterns": []
        },
        "setBattleDispatcher": {
          "calls": [],
          "patterns": []
        },
        "setBattleStateGetter": {
          "calls": [],
          "patterns": []
        },
        "dispatchBattleEvent": {
          "calls": ["dispatcher"],
          "patterns": []
        },
        "getBattleState": {
          "calls": ["stateGetter"],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/controller.js": {
      "imports": [
        "./roundManager.js",
        "./orchestrator.js",
        "../featureFlags.js",
        "../battleEngineFacade.js"
      ],
      "functions": {}
    },
    "src/helpers/classicBattle/cardStatUtils.js": {
      "imports": ["../battle/index.js"],
      "functions": {
        "getCardStatValue": {
          "calls": ["getStatValue"],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/cardSelection.js": {
      "imports": [
        "../randomCard.js",
        "../cardUtils.js",
        "../settingsStorage.js",
        "../featureFlags.js",
        "../dataUtils.js",
        "../utils.js",
        "../constants.js",
        "../setupScoreboard.js",
        "../../components/Modal.js",
        "../../components/Button.js",
        "../../components/JudokaCard.js",
        "../judokaUtils.js",
        "../lazyPortrait.js"
      ],
      "functions": {
        "qaInfo": {
          "calls": ["isEnabled", "showTemporaryMessage", "setTimeout"],
          "patterns": []
        },
        "showLoadError": {
          "calls": [
            "includes",
            "showMessage",
            "createElement",
            "createButton",
            "addEventListener",
            "close",
            "drawCards",
            "debug",
            "reload",
            "append",
            "createDocumentFragment",
            "createModal",
            "appendChild",
            "querySelector",
            "open"
          ],
          "patterns": []
        },
        "ensureJudokaData": {
          "calls": ["isArray", "fetchJson", "showLoadError"],
          "patterns": []
        },
        "ensureGokyoLookup": {
          "calls": ["fetchJson", "createGokyoLookup", "showLoadError"],
          "patterns": []
        },
        "pickOpponent": {
          "calls": ["getRandomJudoka", "max"],
          "patterns": []
        },
        "renderOpponentPlaceholder": {
          "calls": [
            "querySelector",
            "getFallbackJudoka",
            "qaInfo",
            "render",
            "error",
            "appendChild",
            "setupLazyPortraits",
            "debug"
          ],
          "patterns": []
        },
        "drawCards": {
          "calls": [
            "ensureJudokaData",
            "filter",
            "ensureGokyoLookup",
            "getElementById",
            "loadSettings",
            "isEnabled",
            "generateRandomCard",
            "pickOpponent",
            "getFallbackJudoka",
            "qaInfo",
            "find",
            "renderOpponentPlaceholder"
          ],
          "patterns": []
        },
        "getOpponentJudoka": {
          "calls": [],
          "patterns": []
        },
        "clearOpponentJudoka": {
          "calls": [],
          "patterns": []
        },
        "getGokyoLookup": {
          "calls": [],
          "patterns": []
        },
        "getOrLoadGokyoLookup": {
          "calls": ["ensureGokyoLookup"],
          "patterns": []
        },
        "_resetForTest": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/bootstrap.js": {
      "imports": [
        "../domReady.js",
        "../battleJudokaPage.js",
        "./controller.js",
        "./view.js",
        "./promises.js",
        "./roundUI.js"
      ],
      "functions": {
        "setupClassicBattlePage": {
          "calls": ["bindController", "init"],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/battleEvents.js": {
      "imports": [],
      "functions": {
        "onBattleEvent": {
          "calls": ["addEventListener"],
          "patterns": []
        },
        "offBattleEvent": {
          "calls": ["removeEventListener"],
          "patterns": []
        },
        "emitBattleEvent": {
          "calls": ["dispatchEvent"],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/battleDispatcher.js": {
      "imports": [],
      "functions": {
        "dispatchBattleEvent": {
          "calls": ["dispatchBattleEvent", "getMachine", "dispatch"],
          "patterns": []
        }
      }
    },
    "src/helpers/classicBattle/autoSelectStat.js": {
      "imports": ["../testModeUtils.js", "../battleEngineFacade.js", "./eventDispatcher.js"],
      "functions": {
        "autoSelectStat": {
          "calls": [
            "floor",
            "seededRandom",
            "querySelector",
            "String",
            "add",
            "setTimeout",
            "dispatchBattleEvent",
            "onSelect"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/carousel/structure.js": {
      "imports": [],
      "functions": {
        "createCarouselStructure": {
          "calls": ["createElement", "setAttribute", "appendChild"],
          "patterns": ["factory"]
        }
      }
    },
    "src/helpers/carousel/scroll.js": {
      "imports": [],
      "functions": {
        "createScrollButton": {
          "calls": [
            "createElement",
            "setAttribute",
            "addEventListener",
            "parseFloat",
            "getComputedStyle",
            "scrollBy"
          ],
          "patterns": ["factory"]
        },
        "updateScrollButtonState": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/carousel/responsive.js": {
      "imports": [],
      "functions": {
        "setupResponsiveSizing": {
          "calls": [
            "floor",
            "forEach",
            "querySelectorAll",
            "setProperty",
            "observe",
            "addEventListener",
            "setCardWidths"
          ],
          "patterns": []
        },
        "setCardWidths": {
          "calls": ["floor", "forEach", "querySelectorAll", "setProperty"],
          "patterns": []
        }
      }
    },
    "src/helpers/carousel/navigation.js": {
      "imports": ["../constants.js"],
      "functions": {
        "setupKeyboardNavigation": {
          "calls": ["addEventListener", "preventDefault", "parseFloat", "getComputedStyle"],
          "patterns": []
        },
        "setupSwipeNavigation": {
          "calls": [
            "parseFloat",
            "getComputedStyle",
            "max",
            "min",
            "scrollTo",
            "addEventListener",
            "scrollFromDelta"
          ],
          "patterns": []
        },
        "scrollFromDelta": {
          "calls": ["parseFloat", "getComputedStyle", "max", "min", "scrollTo"],
          "patterns": []
        }
      }
    },
    "src/helpers/carousel/metrics.js": {
      "imports": [],
      "functions": {
        "getPageMetrics": {
          "calls": ["getComputedStyle", "parseFloat", "querySelectorAll", "max", "floor", "ceil"],
          "patterns": []
        }
      }
    },
    "src/helpers/carousel/index.js": {
      "imports": [],
      "functions": {}
    },
    "src/helpers/carousel/focus.js": {
      "imports": [],
      "functions": {
        "setupFocusHandlers": {
          "calls": [
            "from",
            "querySelectorAll",
            "forEach",
            "remove",
            "getBoundingClientRect",
            "abs",
            "add",
            "addEventListener",
            "indexOf",
            "focus",
            "setTimeout",
            "contains",
            "updateCardFocusStyles"
          ],
          "patterns": []
        },
        "updateCardFocusStyles": {
          "calls": [
            "from",
            "querySelectorAll",
            "forEach",
            "remove",
            "getBoundingClientRect",
            "abs",
            "add"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/carousel/controller.js": {
      "imports": ["./metrics.js"],
      "functions": {
        "release": {
          "calls": ["removeEventListener"],
          "patterns": []
        },
        "reset": {
          "calls": [],
          "patterns": []
        },
        "onEnd": {
          "calls": ["reset", "prev", "next"],
          "patterns": []
        }
      }
    },
    "src/helpers/carousel/cards.js": {
      "imports": ["../cardBuilder.js", "../judokaUtils.js", "../judokaValidation.js"],
      "functions": {
        "appendCards": {
          "calls": [
            "hasRequiredJudokaFields",
            "error",
            "join",
            "getMissingJudokaFields",
            "getFallbackJudoka",
            "generateJudokaCard",
            "warn",
            "querySelector",
            "addEventListener",
            "contains",
            "replaceChild",
            "appendChild",
            "push",
            "setAttribute",
            "getAttribute",
            "resolve",
            "allSettled"
          ],
          "patterns": []
        }
      }
    },
    "src/helpers/carousel/accessibility.js": {
      "imports": ["./focus.js", "../lazyPortrait.js", "./controller.js"],
      "functions": {
        "ensureTouchTargetSize": {
          "calls": ["getComputedStyle", "parseInt"],
          "patterns": []
        },
        "applyAccessibilityImprovements": {
          "calls": ["querySelectorAll", "forEach", "ensureTouchTargetSize"],
          "patterns": []
        },
        "initAccessibility": {
          "calls": ["setupFocusHandlers", "applyAccessibilityImprovements", "setupLazyPortraits"],
          "patterns": []
        }
      }
    },
    "src/helpers/browse/setupCountryToggle.js": {
      "imports": ["../countrySlider.js", "../countryPanel.js", "./handleKeyboardNavigation.js"],
      "functions": {
        "handleToggleClick": {
          "calls": ["contains", "toggleCountryPanel", "createCountrySlider"],
          "patterns": []
        },
        "handlePanelKeydown": {
          "calls": ["toggleCountryPanel", "handleKeyboardNavigation"],
          "patterns": []
        },
        "setupCountryToggle": {
          "calls": ["addEventListener", "handleToggleClick", "handlePanelKeydown"],
          "patterns": []
        },
        "countriesLoaded": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/browse/setupCountryFilter.js": {
      "imports": ["../countryPanel.js"],
      "functions": {
        "highlightSelection": {
          "calls": ["querySelectorAll", "forEach", "remove", "add"],
          "patterns": []
        },
        "clearCountryFilter": {
          "calls": [
            "querySelectorAll",
            "forEach",
            "remove",
            "render",
            "updateLiveRegion",
            "toggleCountryPanel"
          ],
          "patterns": []
        },
        "applyCountryFilter": {
          "calls": [
            "highlightSelection",
            "filter",
            "render",
            "updateLiveRegion",
            "querySelector",
            "remove",
            "createElement",
            "setAttribute",
            "appendChild",
            "toggleCountryPanel"
          ],
          "patterns": []
        },
        "setupCountryFilter": {
          "calls": [
            "querySelector",
            "addEventListener",
            "clearCountryFilter",
            "closest",
            "applyCountryFilter"
          ],
          "patterns": []
        },
        "updateLiveRegion": {
          "calls": ["querySelector"],
          "patterns": []
        }
      }
    },
    "src/helpers/browse/handleKeyboardNavigation.js": {
      "imports": [],
      "functions": {
        "handleKeyboardNavigation": {
          "calls": ["from", "querySelectorAll", "indexOf", "preventDefault", "focus"],
          "patterns": []
        }
      }
    },
    "src/helpers/battle/score.js": {
      "imports": ["../battleEngineFacade.js"],
      "functions": {
        "getStatValue": {
          "calls": ["indexOf", "isFinite", "querySelector", "String", "parseInt"],
          "patterns": []
        }
      }
    },
    "src/helpers/battle/index.js": {
      "imports": [],
      "functions": {}
    },
    "src/helpers/battle/battleUI.js": {
      "imports": ["../../utils/scheduler.js"],
      "functions": {
        "getStatButtons": {
          "calls": ["querySelectorAll"],
          "patterns": []
        },
        "getRoundMessageEl": {
          "calls": ["getElementById"],
          "patterns": []
        },
        "resetStatButtons": {
          "calls": [
            "log",
            "forEach",
            "getStatButtons",
            "remove",
            "removeProperty",
            "onFrame",
            "blur",
            "cancel"
          ],
          "patterns": []
        },
        "showResult": {
          "calls": [
            "getRoundMessageEl",
            "cancelFade",
            "add",
            "remove",
            "removeProperty",
            "onFrame",
            "cancel",
            "setTimeout",
            "clearTimeout"
          ],
          "patterns": []
        },
        "cancelFadeFn": {
          "calls": ["cancel", "clearTimeout", "remove", "removeProperty"],
          "patterns": []
        }
      }
    },
    "src/helpers/api/vectorSearchPage.js": {
      "imports": [],
      "functions": {
        "selectMatches": {
          "calls": ["slice"],
          "patterns": []
        },
        "getExtractor": {
          "calls": ["pipeline", "error"],
          "patterns": []
        },
        "preloadExtractor": {
          "calls": ["catch", "getExtractor"],
          "patterns": []
        },
        "__setExtractor": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "src/helpers/api/countryService.js": {
      "imports": ["../dataUtils.js", "../constants.js", "../storage.js", "../debug.js"],
      "functions": {
        "loadCountryMapping": {
          "calls": ["getItem", "fetchJson", "setItem", "debugLog", "importJsonModule"],
          "patterns": []
        },
        "normalizeCode": {
          "calls": ["toLowerCase", "trim", "test"],
          "patterns": []
        },
        "getCountryName": {
          "calls": ["normalizeCode", "loadCountryMapping"],
          "patterns": []
        },
        "getFlagUrl": {
          "calls": ["normalizeCode", "loadCountryMapping"],
          "patterns": []
        }
      }
    },
    "src/helpers/api/battleUI.js": {
      "imports": ["../battleEngineFacade.js"],
      "functions": {
        "chooseOpponentStat": {
          "calls": ["max", "map", "filter", "floor", "random", "reduce"],
          "patterns": []
        },
        "evaluateRound": {
          "calls": ["handleStatSelection"],
          "patterns": []
        }
      }
    },
    "tests/helpers/vectorSearchPage/tagFilter.test.js": {
      "imports": ["vitest", "./fixtures.js"],
      "functions": {}
    },
    "tests/helpers/vectorSearchPage/rendering.test.js": {
      "imports": ["vitest", "./fixtures.js"],
      "functions": {}
    },
    "tests/helpers/vectorSearchPage/queryBuilding.test.js": {
      "imports": ["vitest", "./fixtures.js"],
      "functions": {}
    },
    "tests/helpers/vectorSearchPage/fixtures.js": {
      "imports": ["vitest"],
      "functions": {
        "mockVectorSearch": {
          "calls": ["fn", "mockResolvedValue", "doMock"],
          "patterns": []
        },
        "mockDataUtils": {
          "calls": ["mockResolvedValue", "fn", "doMock"],
          "patterns": []
        },
        "mockConstants": {
          "calls": ["doMock"],
          "patterns": []
        },
        "mockExtractor": {
          "calls": ["__setExtractor"],
          "patterns": []
        },
        "setupPage": {
          "calls": ["mockExtractor", "init"],
          "patterns": []
        }
      }
    },
    "tests/helpers/vectorSearchPage/errorHandling.test.js": {
      "imports": ["vitest", "./fixtures.js"],
      "functions": {}
    },
    "tests/helpers/battleEngine/pauseResumeTimer.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/battleEngine/outcome.test.js": {
      "imports": ["vitest", "../../../src/helpers/BattleEngine.js"],
      "functions": {}
    },
    "tests/helpers/battleEngine/interrupts.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/classicBattle/utils.js": {
      "imports": ["vitest", "../../utils/testUtils.js"],
      "functions": {
        "setupClassicBattleDom": {
          "calls": [
            "resetModules",
            "createBattleCardContainers",
            "createBattleHeader",
            "append",
            "createElement",
            "setAttribute",
            "useFakeTimers",
            "fn",
            "includes",
            "String",
            "cb"
          ],
          "patterns": []
        }
      }
    },
    "tests/helpers/classicBattle/timerStateExposure.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/classicBattle/timerService.nextRound.test.js": {
      "imports": ["vitest", "./domUtils.js", "../mockScheduler.js"],
      "functions": {}
    },
    "tests/helpers/classicBattle/timerService.drift.test.js": {
      "imports": ["vitest", "./domUtils.js", "../mockScheduler.js"],
      "functions": {}
    },
    "tests/helpers/classicBattle/stateTransitions.test.js": {
      "imports": [
        "vitest",
        "../../../src/helpers/classicBattle/stateTable.js",
        "../../../src/helpers/classicBattle/stateMachine.js",
        "../../../src/helpers/classicBattle/battleEvents.js",
        "../../../src/helpers/classicBattle/orchestratorHandlers.js"
      ],
      "functions": {
        "createMachineForTransition": {
          "calls": ["set", "get"],
          "patterns": ["factory"]
        },
        "onTransition": {
          "calls": ["emitBattleEvent"],
          "patterns": []
        }
      }
    },
    "tests/helpers/classicBattle/statSelection.test.js": {
      "imports": ["vitest", "../../utils/testUtils.js", "./mockSetup.js"],
      "functions": {
        "expectDeselected": {
          "calls": ["toBe", "expect", "contains"],
          "patterns": []
        }
      }
    },
    "tests/helpers/classicBattle/statDoubleClick.test.js": {
      "imports": ["vitest", "./utils.js", "./mockSetup.js"],
      "functions": {
        "playDoubleClickRound": {
          "calls": ["getElementById", "handleStatSelection", "runAllTimersAsync"],
          "patterns": []
        }
      }
    },
    "tests/helpers/classicBattle/statButtons.state.test.js": {
      "imports": [
        "vitest",
        "../../../src/helpers/classicBattle/stateMachine.js",
        "../../../src/helpers/classicBattle/orchestratorHandlers.js",
        "../../../src/helpers/classicBattle/view.js"
      ],
      "functions": {}
    },
    "tests/helpers/classicBattle/stallRecovery.test.js": {
      "imports": ["vitest", "../../utils/testUtils.js", "./mockSetup.js"],
      "functions": {}
    },
    "tests/helpers/classicBattle/selectionPrompt.test.js": {
      "imports": ["vitest", "./utils.js", "./mockSetup.js"],
      "functions": {}
    },
    "tests/helpers/classicBattle/scheduleNextRound.test.js": {
      "imports": ["vitest", "./utils.js", "./domUtils.js", "./mockSetup.js"],
      "functions": {
        "mockBattleData": {
          "calls": ["mockImplementation", "includes", "String"],
          "patterns": []
        }
      }
    },
    "tests/helpers/classicBattle/scheduleNextRound.progress.test.js": {
      "imports": [
        "vitest",
        "@/helpers/classicBattle/timerService.js",
        "@/helpers/testModeUtils.js",
        "./domUtils.js",
        "@/helpers/classicBattle/skipHandler.js"
      ],
      "functions": {}
    },
    "tests/helpers/classicBattle/roundStartError.test.js": {
      "imports": [
        "vitest",
        "../../../src/helpers/classicBattle/stateMachine.js",
        "../../../src/helpers/classicBattle/orchestratorHandlers.js"
      ],
      "functions": {}
    },
    "tests/helpers/classicBattle/roundSelectModal.test.js": {
      "imports": [
        "vitest",
        "fs",
        "path",
        "../../../src/helpers/constants.js",
        "../../../src/helpers/classicBattle/roundSelectModal.js"
      ],
      "functions": {}
    },
    "tests/helpers/classicBattle/roundResolverOnce.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/classicBattle/roundResolved.statButton.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/classicBattle/roundReset.test.js": {
      "imports": ["vitest", "../../../src/helpers/classicBattle/orchestratorHandlers.js"],
      "functions": {}
    },
    "tests/helpers/classicBattle/quitModal.test.js": {
      "imports": [
        "vitest",
        "../../../src/helpers/classicBattle/quitModal.js",
        "../../../src/helpers/classicBattle/roundManager.js",
        "../../../src/helpers/battleEngineFacade.js",
        "../../../src/helpers/battle/index.js"
      ],
      "functions": {}
    },
    "tests/helpers/classicBattle/playerChoiceReset.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/classicBattle/pauseTimer.test.js": {
      "imports": ["vitest", "../../utils/testUtils.js", "./domUtils.js", "./mockSetup.js"],
      "functions": {}
    },
    "tests/helpers/classicBattle/orchestrator.events.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/classicBattle/opponentDelay.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/classicBattle/mocks.js": {
      "imports": [
        "vitest",
        "../../../src/helpers/classicBattle/stateTable.js",
        "../../../src/data/settings.json"
      ],
      "functions": {
        "mockScheduler": {
          "calls": ["mock", "fn"],
          "patterns": []
        },
        "mockFeatureFlags": {
          "calls": ["doMock", "mockResolvedValue", "fn"],
          "patterns": []
        },
        "mockDataUtils": {
          "calls": ["includes", "doMock", "fn"],
          "patterns": []
        },
        "defaultFetch": {
          "calls": ["includes"],
          "patterns": []
        },
        "mockStats": {
          "calls": ["doMock"],
          "patterns": []
        },
        "mockRoundManager": {
          "calls": ["doMock", "fn"],
          "patterns": []
        },
        "mockSelectionHandler": {
          "calls": ["doMock", "fn"],
          "patterns": []
        },
        "mockBattleJudokaPage": {
          "calls": ["doMock", "fn"],
          "patterns": []
        },
        "mockShowSnackbar": {
          "calls": ["doMock", "fn"],
          "patterns": []
        },
        "mockTooltips": {
          "calls": ["doMock", "mockResolvedValue", "fn"],
          "patterns": []
        },
        "mockTestModeUtils": {
          "calls": ["doMock", "fn"],
          "patterns": []
        },
        "mockRoundSelectModal": {
          "calls": ["doMock", "fn"],
          "patterns": []
        }
      }
    },
    "tests/helpers/classicBattle/mockSetup.js": {
      "imports": ["vitest", "../../../src/data/settings.json"],
      "functions": {
        "applyMockSetup": {
          "calls": [],
          "patterns": []
        }
      }
    },
    "tests/helpers/classicBattle/matchEnd.test.js": {
      "imports": ["vitest", "./utils.js", "../../../src/helpers/constants.js", "./mockSetup.js"],
      "functions": {
        "playRound": {
          "calls": [
            "getElementById",
            "getCardStatValue",
            "handleStatSelection",
            "runAllTimersAsync"
          ],
          "patterns": []
        },
        "playerWinsRounds": {
          "calls": ["playRound"],
          "patterns": []
        },
        "opponentWinsRounds": {
          "calls": ["playRound"],
          "patterns": []
        }
      }
    },
    "tests/helpers/classicBattle/matchControls.test.js": {
      "imports": ["vitest", "./domUtils.js"],
      "functions": {
        "mockQuitMatch": {
          "calls": ["getElementById"],
          "patterns": []
        }
      }
    },
    "tests/helpers/classicBattle/interruptHandlers.test.js": {
      "imports": ["vitest"],
      "functions": {
        "createStore": {
          "calls": ["setTimeout"],
          "patterns": ["factory"]
        }
      }
    },
    "tests/helpers/classicBattle/interruptFlow.test.js": {
      "imports": ["vitest", "../../../src/helpers/classicBattle/stateMachine.js"],
      "functions": {}
    },
    "tests/helpers/classicBattle/drawNextRound.test.js": {
      "imports": ["vitest", "./utils.js", "./mockSetup.js"],
      "functions": {
        "playRound": {
          "calls": ["getElementById", "handleStatSelection", "runAllTimersAsync"],
          "patterns": []
        }
      }
    },
    "tests/helpers/classicBattle/domUtils.js": {
      "imports": [],
      "functions": {
        "createSnackbarContainer": {
          "calls": ["createElement", "setAttribute", "appendChild"],
          "patterns": ["factory"]
        },
        "createRoundMessage": {
          "calls": ["createElement", "setAttribute", "appendChild"],
          "patterns": ["factory"]
        },
        "createTimerNodes": {
          "calls": ["createElement", "setAttribute", "append"],
          "patterns": ["factory"]
        }
      }
    },
    "tests/helpers/classicBattle/difficulty.test.js": {
      "imports": ["vitest", "../../../src/helpers/battleEngineFacade.js"],
      "functions": {}
    },
    "tests/helpers/classicBattle/debugPanel.test.js": {
      "imports": ["vitest", "../../../src/helpers/classicBattle/uiHelpers.js"],
      "functions": {}
    },
    "tests/helpers/classicBattle/debugCopy.test.js": {
      "imports": ["vitest", "../../../src/helpers/classicBattle/uiHelpers.js"],
      "functions": {}
    },
    "tests/helpers/classicBattle/countdownReset.test.js": {
      "imports": ["vitest", "../../utils/testUtils.js", "./domUtils.js"],
      "functions": {
        "populateCards": {
          "calls": ["getElementById"],
          "patterns": []
        },
        "selectPower": {
          "calls": [
            "mockReturnValue",
            "spyOn",
            "getCardStatValue",
            "getElementById",
            "handleStatSelection",
            "advanceTimersByTimeAsync"
          ],
          "patterns": []
        }
      }
    },
    "tests/helpers/classicBattle/classicBattlePage.import.test.js": {
      "imports": ["vitest"],
      "functions": {}
    },
    "tests/helpers/classicBattle/cardSelection.test.js": {
      "imports": ["vitest", "../../utils/testUtils.js", "./mockSetup.js"],
      "functions": {}
    },
    "tests/helpers/classicBattle/battleStateBadge.test.js": {
      "imports": ["vitest", "./mocks.js", "../../../src/helpers/classicBattle/stateTable.js"],
      "functions": {
        "createBattleDom": {
          "calls": ["createElement", "appendChild", "append"],
          "patterns": ["factory"]
        }
      }
    },
    "tests/helpers/classicBattle/autoSelect.test.js": {
      "imports": ["vitest", "./utils.js", "./mockSetup.js"],
      "functions": {}
    }
  }
}
